// flux
var Fluxxor = require("fluxxor");
var actions = require("actions");

//utils
var sanitise = require('utils/sanitise')
var isInteger = require('utils/is-integer')

//helpers
var _   = require('lodash')
var log = require('debug')(':stores:entity-store')

// generic entity store representing a single google spreadsheet 
var EntityStore = Fluxxor.createStore({
  initialize: function(options) {
    // set store name to sheet name
    this.name = options.sheet
    // entity type
    this.type = options.type
    // entity title object (single and plural)
    this.title = options.title    
    // the store data
    this.data = []       
    // the load data closure 
    this.loadData = options.loadData
    
    this.searchFields = { 
      actions : ['id','title','description','desiredoutcome','strategy','measures'],
      recommendations : ['id','title','state','response','responsetext'],
      issues:['title','currentcontext','otherissuesraised'],
      groups:['title','commentary','description'],
      agencies:['title','description'],
      treatybodies:['title','about','concludingobservations'],
      pages:['title','lead','description'],
      articles:['id','title'],
      faq:['question','answer']
    }            
    
    // call our load data closure with success callback    
    this.loadData({
      key:options.key, 
      bucket:options.bucket, 
      sheet:options.sheet, 
      isProxy:options.isProxy
    }, this.loadDataSuccess)()
    // loading state
    this.loading = true    
  },
  
  // data load success callback 
  loadDataSuccess: function (data) {
    log('success', this.name)
    // remember data
    this.data = _.sortBy(sanitise(data[this.name].elements),function(d){
      d.type = this.type
      return (isInteger(d.id) ? parseInt(d.id) : d.id)
    },this)      
    
    _.each(this.data, function(entity) {
      entity.searchTarget = this.prepareSearch(entity)
    },this)
    
    this.loading = false    
    // broadcast change
    this.emit('change')
  },  
  prepareSearch : function(entity){
    var searchTarget = this.title.plural + ' '
    _.each(this.searchFields[this.name],function(field){
      if (typeof entity[field] !== 'undefined') {
        searchTarget += entity[field]
          .replace(/[āĀ]/, "a")
          .replace(/[ēĒ]/, "e")
          .replace(/[īĪ]/, "i")
          .replace(/[ōŌ]/, "o")
          .replace(/[ūŪ]/, "u")
        searchTarget += ' '
      }
    },this)
    return searchTarget
  },
  isLoading : function(){
    return this.loading
  },
  // return one row for match
  findOne: function (match) {    
    return _.find(this.data, match)
  },
  // return multiple rows for where match
  query: function (match) {
    if (!match) return  this.data
    return _(this.data).where(match).clone(true)
  },
  // return multiple rows for filter match
  filter: function (match) {
    if (!match) return  this.data
    return _(this.data).filter(match).clone(true)
  },
  // return all rows
  entities: function () {
    return _.clone(this.data,true)
  },
  // return no of rows for match
  countWhere: function(match) {
    return this.filter(match).length
  }, 
  //return type
  getEntityType : function(){
    return this.type
  },
  // return title for a given no of entities (length - optional) 
  getTitle : function(length){
    length = typeof length !== 'undefined' ? length : 1
    return length === 1 ? this.title.single : this.title.plural
  }  
});

module.exports = EntityStore;