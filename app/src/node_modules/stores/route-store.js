// flux
var Fluxxor = require("fluxxor")
var actions = require("actions")

// helpers
var _       = require('lodash')
var log     = require('debug')('src:node_modules:stores:route-store')

// Route Store binds route changing actions and triggers router transitions
var RouteStore = Fluxxor.createStore({
  initialize: function (options) {    
    // set router
    this.router           = options.router    
    // route actions
    this.bindActions(
      actions.constants.ROUTE.TRANSITION, this.transition,
      actions.constants.ROUTE.GOBACK, this.goBack,
      actions.constants.ROUTE.UPDATE_QUERY, this.updateQuery,
      actions.constants.ROUTE.DELETE_FROM_QUERY, this.deleteFromQuery
    )
  },
  // return current route
  getCurrentRoute : function() {
    return this.router.getRouteAtDepth(1).name;
  },
  // return current parameters
  getCurrentParams: function () {
    return this.router.getCurrentParams()
  },
  // return current query
  getCurrentQuery: function () {
    return this.router.getCurrentQuery()
  },
  // transition to new URL
  // payload.route, payload.params, payload.query}
  transition: function (payload) {
    log('transition', payload)    
    
    // the query
    var payloadQuery = _.omit(payload.query, function (val) { return val === '' });

    // route specified: transition to new route
    if (payload.route) {
      this.router.transitionTo(payload.route, payload.params || {}, payloadQuery);
    // route unspecified
    } else {
      // params specified: get current route and transition to new params
      if (payload.params) {
        this.router.transitionTo(this.getCurrentRoute(), payload.params, payloadQuery);
      // params unspecified
      } else {
        // query specified: get current route and params and transition to new query
        if (payloadQuery) {
          this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), payloadQuery )
        }
      }
    }
  },
  // go to previous route if history exists, if not
  goBack : function () {
    log('goback', this.router)
    // goback returns false if no history present
    // this is pretty ugly 
    // todo: figure out a better way to check if history present
    if (!this.router.goBack()) {
      // cannot go back transition to home
      this.router.transitionTo('/')
    }
  },
  updateQuery : function(payload) {
    var currentQuery = this.getCurrentQuery()
    
    var updatedQuery = _.clone(currentQuery)
    
    if (payload.values === '') {
      delete updatedQuery[payload.field]
    } else {
      updatedQuery[payload.field] = (_.isArray(payload.values) && payload.values.length === 1) 
        ? payload.values[0] 
        : payload.values
    }
    
    this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), updatedQuery )
    
  },
  deleteFromQuery : function(payload) {
    var currentQuery = this.getCurrentQuery()
    
    var updatedQuery = _.clone(currentQuery)
    
    if (_.isArray(payload.fields)){
      _.each(payload.fields,function(field) {
        delete updatedQuery[field]
      })
    } else {
      delete updatedQuery[payload.fields]
    }           
    
    this.router.transitionTo(this.getCurrentRoute(), this.getCurrentParams(), updatedQuery )
    
  }



});

module.exports = RouteStore;
