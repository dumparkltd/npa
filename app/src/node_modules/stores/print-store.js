// flux
var Fluxxor = require('fluxxor')
var actions = require('actions')
var createPdf = require('../../../node_modules/pdfmake/build/pdfmake.js')
var vfs_fonts = require('../../../node_modules/pdfmake/build/vfs_fonts.js')

// helpers
var _       = require('lodash')
var log     = require('debug')('src:node_modules:stores:print-store')
var moment  = require('moment')

// util
var referencing = require('utils/referencing')

// Route Store binds route changing actions and triggers router transitions
var PrintStore = Fluxxor.createStore({

  initialize: function (options) {
    this.styles = {
      header1: {
        fontSize: 22,
        bold: true
      },
      header2: {
        fontSize: 15,
        bold: true,
        color: '#7696A5'
      },
      header3: {
        fontSize: 12,
        bold: true
      },
      grey: {
        color: '#DAE4E7'
      },
      blue: {
        color: '#008399'
      },
      green: {
        color: '#108609'
      },
      bold: {
        bold: true
      },
      decreaseFont: {
        fontSize: 8
      }
    }
    // Defining the category structures
    this.structure = {
      agency: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'WEBSITE',
        side: 'link'
      },
      group: {
        mainTitle: 'COMMENTARY',
        main: 'commentary',
        sideTitle: 'ABOUT THIS GROUP',
        side: 'description'
      },
      issue: {
        mainTitle: 'CURRENT CONTEXT',
        main: 'currentcontext',
        sideTitle: 'OTHER ISSUES RAISED BY CIVIL SOCIETY',
        side: 'otherissuesraised'
      },
      treatyBody: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'CONCLUDING OBSERVATIONS',
        side: 'concludingobservations'
      }
    }
    // route actions
    this.bindActions(
      actions.constants.PRINT, this.print
    )
  },

  print: function (payload) {
    this.waitFor(['actions', 'issues', 'groups', 'agencies', 'pages'],
    function (actionStore, issueStore, groupStore, agencyStore, pageStore) {
      var content, category, relatedEntities, categoryStartPage, actionStartPage

      switch (payload.type) {
        case 'action' :
          var action = actionStore.findOne({id: payload.id})
          content = this.getAction(action)
          var recs = referencing(this.flux, {
            entity : action,
            attr : 'recommendations',
            to : 'recommendations'
          })
          content.content.push(this.getRecommendations(recs))
          var reportTitle = 'New Zealand’s National Plan of Action | Action report | Action: ' + action.title
          actionStartPage = 2
          break
        case 'issue' :
          category = issueStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'issues')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'group' :
          category = groupStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'groups')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'agency' :
          category = agencyStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'agencies')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'all' :
          relatedEntities = actionStore.entities()
          var allAgencies = agencyStore.entities()
          var allGroups = groupStore.entities()
          var allIssues = issueStore.entities()
          actionStartPage = (allAgencies.length + allGroups.length + allIssues.length) * 2
          content = this.getAll(payload, relatedEntities, allAgencies, allGroups, allIssues)
          var reportTitle = 'New Zealand’s National Plan of Action | Full report'
          break
      }

      var lastFooterMode

      var docDefinition = {
        content: content.content,
        styles: this.styles,
        defaultStyle: {
          columnGap: 20,
          fontSize: 10
        },
        footer: function(currentPage, pageCount, footerMode) {
          switch (footerMode) {
            case 'action':
              if(lastFooterMode != footerMode) {
                actionStartPage = currentPage - 1
              }
              lastFooterMode = 'action'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 600, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: 'grey'},
                  {text: 'B|' + (currentPage - actionStartPage).toString(),
                  alignment: 'right',
                  style: 'grey'}
                ]}],
                margin: [10, 0]
              }
              break;
            case 'appendix':
              if(lastFooterMode != footerMode) {
                appendixStartPage = currentPage - 1
              }
              lastFooterMode = 'appendix'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 600, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: 'grey'},
                  {text: 'C|' + (currentPage - appendixStartPage).toString(),
                  alignment: 'right',
                  style: 'grey'}
                ]}],
                margin: [10, 0]
              }
              break;
            case 'category':
              if(lastFooterMode != footerMode) {
                categoryStartPage = currentPage - 1
              }
              lastFooterMode = 'category'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 600, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: 'grey'},
                  {text: 'A|' + (currentPage - categoryStartPage).toString(),
                  alignment: 'right',
                  style: 'grey'}
                ]}],
                margin: [10, 0]
              }
              break;
          }
        }
      }
      pdfMake.createPdf(docDefinition).download()
    })
  },

  getAction: function (action) {
    var issues = referencing(this.flux, 
      {
        entity: action,
        attr: "issues",
        to: "issues"
      }
    )
    var issuesTitle = this.flux.store('issues').getTitle(issues.length)
    var groups = referencing(this.flux, 
      {
        entity: action,
        attr: "groups",
        to: "groups"
      }
    )
    var groupsTitle = this.flux.store('groups').getTitle(groups.length)
    var agencies = referencing(this.flux, 
      {
        entity: action,
        attr: "agencies",
        to: "agencies"
      }
    )
    var agenciesTitle = this.flux.store('agencies').getTitle(agencies.length)
    
    var actionContent = {
      content: [
        {text: 'Action #' + action.id, style: 'header1', margin: [0, 20]},
        {text: action.title, style: 'header1', margin: [0, 20]},
        {
          columns: [
            {
              stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 300, y2: 5, lineWidth: 0.7 }]},
                (!_.isEmpty(action.description)) ? {text: 'DESCRIPTION', style: 'header2', margin: [0, 10]} : {text: ''},
                {text: action.description},
                !_.isEmpty(action.desiredoutcome) ? {text: 'DESIRED OUTCOME', style: 'header2', margin: [0, 10]} : {text: ''},
                {text: action.desiredoutcome},
                !_.isEmpty(action.measures) ? {text: 'MEASURES', style: 'header2', margin: [0, 10]} : {text: ''},
                {text: action.measures},
                {text: 'TARGET DATE', style: 'header2', margin: [0, 10]},
                !_.isEmpty(action.targetdate) ? {text: action.targetdate} : {text: action.targetdatecomment},
              ],
              width: '60%'
            },
            [
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineWidth: 0.7 }]},
              {text: [{text: 'SMART ', style: 'bold'}, {text: 'criteria'}]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {columns: [
                {width: '60%', text: [{text: 'Specific | ' }, {text: action.isspecific ? 'MET' : 'Not met', style: action.isspecific ? 'green' : '#DAE4E7'}]},
                {width: '40%', text: 'X'}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {columns: [
                {width: '60%', text: [{text: 'Measurable | ' }, {text: action.ismeasurable ? 'MET' : 'Not met', style: action.ismeasurable ? 'green' : '#DAE4E7'}]},
                {width: '40%', text: 'X'}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {columns: [
                {width: '60%', text: [{text: 'Assignable | ' }, {text: action.isassignable ? 'MET' : 'Not met', style: action.isassignable ? 'green' : '#DAE4E7'}]},
                {width: '40%', text: 'X'}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {columns: [
                {width: '60%', text: [{text: 'Result-oriented | ' }, {text: action.isresultsoriented ? 'MET' : 'Not met', style: action.isresultsoriented ? 'green' : '#DAE4E7'}]},
                {width: '40%', text: 'X'}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {columns: [
                {width: '60%', text: [{text: 'Time-bound | ' }, {text: action.istimebound ? 'MET' : 'Not met', style: action.istimebound ? 'green' : '#DAE4E7'}]},
                {width: '40%', text: 'X'}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineWidth: 0.7 }]},
              {text: [{text: 'ACTION ', style: 'bold'}, {text: 'categories'}]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {text: issuesTitle, style: 'header3', margin: [0, 10]},
              {text: this.makeCategoryList(issues) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {text: groupsTitle, style: 'header3', margin: [0, 10]},
              {text: this.makeCategoryList(groups) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {text: agenciesTitle, style: 'header3', margin: [0, 10]},
              {text: this.makeCategoryList(agencies) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 180, y2: 5, lineWidth: 0.7 }]},
              {text: [{text: 'Related UPR Recommendations ', style: 'bold'}, {text: '2014'}]},
              {text: 'No.'},
              {text: action.recommendations.toString().replace(/,/g, ', '), style: 'blue'}
            ]
          ],
          pageBreak: 'after',
          footerMode: 'action'
        }
      ]
    }

    return actionContent
  },
  
  makeCategoryList: function(categories){
    return _.map(categories,function(cat){ return cat.title }).join(', ')
  },
  
  
  getRecommendations: function (recs) {
    var content = {
      stack: [
        {text: 'INDEX: ALL UPR RECOMMENDATIONS', style: 'header4'},
        {
          text: recs.length + ' UPR RECOMMENDATIONS',
          style: 'header2',
          margin: [0, 20],
          footerMode: 'appendix'
        },
        {columns: [
          {width: '10%', text: 'NO.'},
          {width: '70%', text: 'UPR RECOMMENDATIONS'},
          {width: '10%', text: 'ADDRESSED'},
          {width: '10%', text: 'RESPONSE'},
        ]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineWidth: 0.7 }]},
        {columns: [
          {width: '80%', text: ''},
          {width: '10%', text: 'Addressed'},
          {width: '8%', text: 'Accepted'},
          {width: '2%', text: 'X'}
        ]},
        {columns: [
          {width: '80%', text: ''},
          {width: '10%', text: 'Not Addressed'},
          {width: '8%', text: 'Not Accepted'},
          {width: '2%', text: 'X'}
        ]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},

      ]
    }

    var recsIndex = _.map(recs, function (value, key) {
      var tableOfContents = {
        stack: [
          {columns: [
            {width: '10%', text: value.id},
            {width: '70%', text: value.title},
            {width: '10%', text: 'X'},
            {width: '10%', text: 'X'}
          ]},
          {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]}
        ],
        footerMode: 'appendix'
      }
      return tableOfContents
    })

    return [content, recsIndex]
  },

  getCategory: function (payload, category, type) {
    var relatedEntities = referencing(this.flux, {
      entity: category,
      attr: type,
      from: 'actions'
    })

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var recs = referencing(this.flux, {
      entity : category,
      attr : type,
      from : 'recommendations'
    })

    var categoryContent = {
      content: [
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.8, y2: 5, lineWidth: 0.7 }]},
        {text: "New Zealand's National Plan of Action"},
        {text: "For the Protection and Promotion of Human Rights"},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.8, y2: 5, lineWidth: 0.7 }]},
        {text: type.toUpperCase() + ' REPORT'},
        {text: category.title, style: 'header1', margin: [0, 20]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
        {text: 'IN THIS REPORT:'},
        {text: 'Section A'},
        {text: category.title},
        {text: 'Section B'},
        {text: relatedEntities.length + ' Government Actions'},
        {text: 'Section C'},
        {text: recs.length + ' UPR Recommendations'},
        {columns: [
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'DATE ' + moment().format('DD/MM/YYYY')},
            {text: 'ISBN' + 'XXXXX'},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'npa.hrc.co.nz', style: 'header1'}
          ], width: '50%'},
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'HRNZC LOGO'}
          ], width: '50%'}
        ],
        pageBreak: 'after', footerMode: 'category'},
        this.getCategoryContent(category, payload.type, relatedEntities, relatedEntities).category,
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    categoryContent.content.push(this.getRecommendations(recs))

    return categoryContent
  },

  getCategoryContent: function (category, type, relatedEntities, allActions) {
    var pageNum = 0
    var indexOfActions = _.map(allActions, function(value, key) {
      pageNumToUse = pageNum + 1
      pageNum += _.isEmpty(value.printnoofpages) ? 1 : +value.printnoofpages
      return {id: value.id, pageNum: pageNumToUse}
    })

    var relatedEntitiesIndex = _.map(relatedEntities, function (value, key) {
      var tableOfContents = {
        stack: [
          {columns: [
            {width: '5%', text: value.id, style: 'bold'},
            {width: '60%', text: value.title},
            {width: '5%', text: value.isspecific},
            {width: '5%', text: value.ismeasurable},
            {width: '5%', text: value.isassignable},
            {width: '5%', text: value.isresultsoriented},
            {width: '5%', text: value.istimebound},
            {width: '5%', text: 'B', style: 'grey'},
            {width: '5%', text: _.findWhere(indexOfActions, {id: value.id}).pageNum.toString()}
          ]},
          {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]}
        ]
      }
      return tableOfContents
    })

    var categoryContent = [
      {text: type.toUpperCase()},
      {text: category.title, style: 'header1', margin: [0, 20]},
      {
        columns: [
          {
            stack: [
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.6 - 15, y2: 5, lineWidth: 0.7 }]},
              {text: this.structure[type].mainTitle, style: 'header2', margin: [0, 10]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.6 - 15, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
              {text: category[this.structure[type].main]}
            ],
            width: '60%'
          },
          [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: this.structure[type].sideTitle, style: 'header3', margin: [0, 10]},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
            {text: category[this.structure[type].side], style: 'blue'}
          ]
        ],
        pageBreak: 'after',
        footerMode: 'category'
      },
      {text: 'ACTION INDEX | ' + type.toUpperCase() + ": " + category.title.toUpperCase(), style: 'header2', margin: [0, 20]},
      {text: relatedEntities.length + ' related Actions', style: 'header1', margin: [0, 20]},
      { columns: [
        {text: 'ID#', style: 'grey', width: '5%'},
        {text: 'GOVERNMENT ACTION', style: 'grey', width: '60%'},
        {text: 'SMART CRITERIA', style: 'grey', width: '25%'},
        {text: 'SECTION', style: 'grey', width: '5%'},
        {text: 'PAGE', style: 'grey', width: '5%'}
      ]},
      {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineWidth: 0.7 }]},
      { columns: [
        {text: '', style: 'decreaseFont', width: '65%'},
        {text: 'SPECIFIC', style: 'decreaseFont', width: '5%'},
        {text: 'MEASURABLE', style: 'decreaseFont', width: '5%'},
        {text: 'ASSIGNABLE', style: 'decreaseFont', width: '5%'},
        {text: 'RESULT\n-ORIENTED', style: 'decreaseFont', width: '5%'},
        {text: 'TIME\n-BOUND', style: 'decreaseFont', width: '5%'},
        {text: '', width: '10%'}
      ]},
      {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#DAE4E7', lineWidth: 0.7 }]},
      {stack: relatedEntitiesIndex, pageBreak: 'after', footerMode: 'category'}
    ]

    return {category: categoryContent, pageLength: 0}
  },

  getAll: function (payload, relatedEntities, allAgencies, allGroups, allIssues) {
    var relatedGroupEntities = _.map(allGroups, function (value, key) {
      var relatedGroupActions = referencing(this.flux, {
          entity: value,
          attr: 'groups',
          from: 'actions'
        })
      var category = this.getCategoryContent(value, 'group', relatedGroupActions, relatedEntities)
      return category.category
    }, this)

    var relatedIssueEntities = _.map(allIssues, function (value, key) {
      var relatedIssueActions = referencing(this.flux, {
          entity: value,
          attr: 'issues',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'issue', relatedIssueActions, relatedEntities)
      return category.category
    }, this)

    var relatedAgencyEntities = _.map(allAgencies, function (value, key) {
      var relatedAgencyActions = referencing(this.flux, {
          entity: value,
          attr: 'agencies',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'agency', relatedAgencyActions, relatedEntities)
      return category.category
    }, this)

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var allContent = {
      content: [
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.8, y2: 5, lineWidth: 0.7 }]},
        {text: "New Zealand's National Plan of Action"},
        {text: "For the Protection and Promotion of Human Rights"},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.8, y2: 5, lineWidth: 0.7 }]},
        {text: 'FULL REPORT'},
        {text: 'NATIONAL PLAN OF ACTION', style: 'header1', margin: [0, 20]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
        {text: 'IN THIS REPORT:'},
        {text: 'Section A'},
        {text: 'Analysis by Issue, Population Group and Government Agency'},
        {text: 'Section B'},
        {text: relatedEntitiesAction.length + ' Government Actions'},
        {columns: [
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'DATE ' + moment().format('DD/MM/YYYY')},
            {text: 'ISBN' + 'XXXXX'},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'npa.hrc.co.nz', style: 'header1'}
          ], width: '50%'},
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.7 }]},
            {text: 'HRNZC LOGO'}
          ], width: '50%'}
        ],
        pageBreak: 'after', footerMode: 'category'},
        {text: 'CATEGORY: GROUPS', style: 'header1', margin: [0, 20]},
        {
          stack: relatedGroupEntities,
          pageBreak: 'after',
          footerMode: 'category'

        },
        {text: 'CATEGORY: ISSUES', style: 'header1', margin: [0, 20]},
        {
          stack: relatedIssueEntities,
          pageBreak: 'after',
          footerMode: 'category'
        },
        {text: 'CATEGORY: AGENCIES', style: 'header1', margin: [0, 20]},
        {
          stack: relatedAgencyEntities,
          pageBreak: 'after',
          footerMode: 'category',
        },
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    return allContent
  }
})

module.exports = PrintStore
