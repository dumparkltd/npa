// flux
var Fluxxor = require('fluxxor')
var actions = require('actions')
var createPdf = require('pdfmake-browserified')

// helpers
var _       = require('lodash')
var log     = require('debug')('src:node_modules:stores:print-store')

// util
var referencing = require('utils/referencing')

// Route Store binds route changing actions and triggers router transitions
var PrintStore = Fluxxor.createStore({

  initialize: function (options) {
    this.styles = {
      header1: {
        fontSize: 22,
        bold: true
      },
      header2: {
        fontSize: 15,
        bold: true,
        color: '#7696A5'
      },
      header3: {
        fontSize: 12,
        bold: true
      },
      blue: {
        color: '#008399'
      }
    }
    // Defining the category structures
    this.structure = {
      agency: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'WEBSITE',
        side: 'link'
      },
      group: {
        mainTitle: 'COMMENTARY',
        main: 'commentary',
        sideTitle: 'ABOUT THIS GROUP',
        side: 'description'
      },
      issue: {
        mainTitle: 'CURRENT CONTEXT',
        main: 'currentcontext',
        sideTitle: 'OTHER ISSUES RAISED BY CIVIL SOCIETY',
        side: 'otherissuesraised'
      },
      treatyBody: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'CONCLUDING OBSERVATIONS',
        side: 'concludingobservations'
      }
    }
    // route actions
    this.bindActions(
      actions.constants.PRINT, this.print
    )
  },

  print: function (payload) {
    this.waitFor(['actions', 'issues', 'groups', 'agencies', 'pages'],
    function (actionStore, issueStore, groupStore, agencyStore, pageStore) {
      var content, category, relatedEntities, categoryStartPage, actionStartPage

      switch (payload.type) {
        case 'action' :
          var action = actionStore.findOne({id: payload.id})
          content = this.getAction(action)
          var recs = referencing(this.flux, {
            entity : action,
            attr : 'recommendations',
            to : 'recommendations'
          })
          content.content.push(this.getRecomendations(recs))
          actionStartPage = 2
          break
        case 'issue' :
          category = issueStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'issues')
          categoryStartPage = 1
          actionStartPage = 3
          break
        case 'group' :
          category = groupStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'groups')
          categoryStartPage = 1
          actionStartPage = 3
          break
        case 'agency' :
          category = agencyStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'agencies')
          categoryStartPage = 1
          actionStartPage = 3
          break
        case 'all' :

          var relatedEntities = payload.conditions.length === 0
            ? actionStore.entities()
            : actionStore.filter(function(item){
              return payload.conditions.length === 1
                ? payload.conditions[0](item)
                : _.reduce(payload.conditions, function(bool, condition){
                  return (typeof bool === 'function' ? bool(item) : bool) && condition(item)
                })
              })



        //  relatedEntities = actionStore.entities()
          var allAgencies = agencyStore.entities()
          var allGroups = groupStore.entities()
          var allIssues = issueStore.entities()
          categoryStartPage = 1
          actionStartPage = (allAgencies.length + allGroups.length + allIssues.length) * 2
          content = this.getAll(payload, relatedEntities, allAgencies, allGroups, allIssues)
          break
      }

      var lastFooterMode

      var docDefinition = {
        content: content.content,
        styles: this.styles,
        defaultStyle: {
          columnGap: 20
        },
        footer: function(currentPage, pageCount, footerMode) {
          if(footerMode != 'action'){
            lastFooterMode = 'category'
            return {
              text: 'A' + (currentPage - categoryStartPage).toString(),
              alignment: 'center',
              margin: [0, 0, 0, 10]
            }
          }else{
            if(lastFooterMode != footerMode) {
              actionStartPage = currentPage - 1
            }
            lastFooterMode = 'action'
            return {
              text: 'B' + (currentPage - actionStartPage).toString(),
              alignment: 'center',
              margin: [0, 0, 0, 10]
            }
          }
        }
      }
      createPdf(docDefinition).download()
    })
  },

  getAction: function (action) {
    var actionContent = {
      content: [
        {text: action.title, style: 'header1', margin: [0, 20]},
        (!_.isEmpty(action.description)) ? {text: 'DESCRIPTION', style: 'header2', margin: [0, 10]} : {text: ''},
        {
          columns: [
            {
              stack: [
                {text: action.description},
                !_.isEmpty(action.desiredoutcome) ? {text: 'DESIRED OUTCOME', style: 'header2', margin: [0, 10]} : {text: ''},
                {text: action.desiredoutcome},
                !_.isEmpty(action.measures) ? {text: 'MEASURES', style: 'header2', margin: [0, 10]} : {text: ''},
                {text: action.measures},
                !_.isEmpty(action.targetdate) ? {text: 'TARGET DATE', style: 'header2', margin: [0, 10]} : {text: ''},
                !_.isEmpty(action.targetdate) ? {text: action.targetdate, style: 'header2', margin: [0, 10]} : {text: ''},
              ],
              width: '80%'
            },
            [
              {text: 'Issue', style: 'header3', margin: [0, 10]},
              {text: action.issues, style: 'blue'},
              {text: 'Population Groups', style: 'header3', margin: [0, 10]},
              {text: action.groups, style: 'blue'},
              {text: 'Government Agency', style: 'header3', margin: [0, 10]},
              {text: action.agencies, style: 'blue'}
            ]
          ],
          pageBreak: 'after'
        }
      ]
    }

    return actionContent
  },

  getRecomendations: function (recs) {
    var content = {
      text: recs.length + ' RELATED RECOMMENDATIONS',
      style: 'header2',
      margin: [0, 20]
    }

    var recsIndex = _.map(recs, function (value, key) {
      var tableOfContents = {
        columns: [
          {width: '10%', text: value.id},
          {width: '90%', text: value.title}
        ]
      }
      return tableOfContents
    })

    return [content, recsIndex]
  },

  getCategory: function (payload, category, type) {
    var relatedEntities = referencing(this.flux, {
      entity: category,
      attr: type,
      from: 'actions'
    })

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var categoryContent = {
      content: [
        {text: category.title, style: 'header1', margin: [0, 20], pageBreak: 'after', footerMode: 'category'},
        this.getCategoryContent(category, payload.type, relatedEntities, relatedEntities).category,
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    var recs = referencing(this.flux, {
      entity : category,
      attr : type,
      from : 'recommendations'
    })
    categoryContent.content.push(this.getRecomendations(recs))

    return categoryContent
  },

  getCategoryContent: function (category, type, relatedEntities, allActions) {
    var pageNum = 0
    var indexOfActions = _.map(allActions, function(value, key) {
      pageNum += _.isEmpty(value.printnoofpages) ? 1 : +value.printnoofpages
      return {id: value.id, pageNum: pageNum}
    })

    var relatedEntitiesIndex = _.map(relatedEntities, function (value, key) {
      var tableOfContents = {
        columns: [
          {width: '80%', text: value.title},
          {width: '20%', text: 'B' + _.findWhere(indexOfActions, {id: value.id}).pageNum}
        ]
      }
      return tableOfContents
    })

    var categoryContent = [
      {text: category.title, style: 'header1', margin: [0, 20]},
      {
        columns: [
          {
            stack: [
              {text: this.structure[type].mainTitle, style: 'header2', margin: [0, 10]},
              {text: category[this.structure[type].main]}
            ],
            width: '80%'
          },
          [
            {text: this.structure[type].sideTitle, style: 'header3', margin: [0, 10]},
            {text: category[this.structure[type].side], style: 'blue'}
          ]
        ],
        pageBreak: 'after',
        footerMode: 'category'
      },
      {text: 'ACTION INDEX', style: 'header1', margin: [0, 20]},
      {text: relatedEntities.length + ' RELATED ACTIONS', style: 'header2', margin: [0, 20]},
      {
        columns: [
          {text: 'Action', width: '80%'},
          {text: 'Page', width: '20%'}
        ],
        margin: [0, 10],
        footerMode: 'category'
      },
      {stack: relatedEntitiesIndex, pageBreak: 'after', footerMode: 'category'}
    ]

    return {category: categoryContent, pageLength: 0}
  },

  getAll: function (payload, relatedEntities, allAgencies, allGroups, allIssues) {
    var relatedGroupEntities = _.map(allGroups, function (value, key) {
      var relatedGroupActions = referencing(this.flux, {
          entity: value,
          attr: 'groups',
          from: 'actions'
        })
      var category = this.getCategoryContent(value, 'group', relatedGroupActions, relatedEntities)
      return category.category
    }, this)

    var relatedIssueEntities = _.map(allIssues, function (value, key) {
      var relatedIssueActions = referencing(this.flux, {
          entity: value,
          attr: 'issues',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'issue', relatedIssueActions, relatedEntities)
      return category.category
    }, this)

    var relatedAgencyEntities = _.map(allAgencies, function (value, key) {
      var relatedAgencyActions = referencing(this.flux, {
          entity: value,
          attr: 'agencies',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'agency', relatedAgencyActions, relatedEntities)
      return category.category
    }, this)

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var allContent = {
      content: [
        {text: 'FULL REPORT', style: 'header1', margin: [0, 20], pageBreak: 'after', footerMode: 'category'},
        {text: 'CATEGORY: GROUPS', style: 'header1', margin: [0, 20]},
        {
          stack: relatedGroupEntities,
          pageBreak: 'after',
          footerMode: 'category'

        },
        {text: 'CATEGORY: ISSUES', style: 'header1', margin: [0, 20]},
        {
          stack: relatedIssueEntities,
          pageBreak: 'after',
          footerMode: 'category'
        },
        {text: 'CATEGORY: AGENCIES', style: 'header1', margin: [0, 20]},
        {
          stack: relatedAgencyEntities,
          pageBreak: 'after',
          footerMode: 'category',
        },
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    return allContent
  }
})

module.exports = PrintStore
