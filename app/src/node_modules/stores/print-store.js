// flux
var Fluxxor = require('fluxxor')
var actions = require('actions')
var createPdf = require('../../../node_modules/pdfmake/build/pdfmake.js')
var vfs_fonts = require('../../../node_modules/pdfmake/build/vfs_fonts.js')

// helpers
var _       = require('lodash')
var log     = require('debug')('src:node_modules:stores:print-store')
var moment  = require('moment')

// util
var referencing = require('utils/referencing')
var marked = require('utils/parse-markdown')
var parseHTML = require('utils/parse-html')

// Route Store binds route changing actions and triggers router transitions
var PrintStore = Fluxxor.createStore({

  initialize: function (options) {
    this.styles = {
      size34: {
        fontSize: 34
      },
      size26: {
        fontSize: 26
      },
      size21: {
        fontSize: 21
      },
      size18: {
        fontSize: 18
      },
      size14: {
        fontSize: 14
      },
      size12: {
        fontSize: 12
      },
      size10: {
        fontSize: 10
      },
      size8_5: {
        fontSize: 8.5
      },
      size7_5: {
        fontSize: 7.5
      },
      size7: {
        fontSize: 7
      },
      size6: {
        fontSize: 6
      },
      size5_2: {
        fontSize: 5.2
      },
      grey: {
        color: '#9DA8AB'
      },
      blue: {
        color: '#039CE6'
      },
      green: {
        color: '#69A31F'
      },
      white: {
        color: "#ffffff"
      },
      bold: {
        bold: true
      }
    }
    // Defining the category structures
    this.structure = {
      agency: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'WEBSITE',
        side: 'link'
      },
      group: {
        mainTitle: 'COMMENTARY',
        main: 'commentary',
        sideTitle: 'ABOUT THIS GROUP',
        side: 'description'
      },
      issue: {
        mainTitle: 'CURRENT CONTEXT',
        main: 'currentcontext',
        sideTitle: 'OTHER ISSUES RAISED BY CIVIL SOCIETY',
        side: 'otherissuesraised'
      },
      treatyBody: {
        mainTitle: 'ABOUT',
        main: 'description',
        sideTitle: 'CONCLUDING OBSERVATIONS',
        side: 'concludingobservations'
      }
    }
    // route actions
    this.bindActions(
      actions.constants.PRINT, this.print
    )

  },

  print: function (payload) {
    this.waitFor(['actions', 'issues', 'groups', 'agencies', 'pages'],
    function (actionStore, issueStore, groupStore, agencyStore, pageStore) {
      var content, category, relatedEntities, categoryStartPage, actionStartPage

      switch (payload.type) {
        case 'action' :
          var action = actionStore.findOne({id: payload.id})
          content = this.getAction(action)
          var recs = referencing(this.flux, {
            entity : action,
            attr : 'recommendations',
            to : 'recommendations'
          })
          content.content.push(this.getRecommendations(recs))
          var reportTitle = 'New Zealand’s National Plan of Action | Action report | Action: ' + action.title
          actionStartPage = 2
          break
        case 'issue' :
          category = issueStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'issues')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'group' :
          category = groupStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'groups')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'agency' :
          category = agencyStore.findOne({id: payload.id})
          content = this.getCategory(payload, category, 'agencies')
          var reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
          break
        case 'all' :
          relatedEntities = actionStore.entities()
          var allAgencies = agencyStore.entities()
          var allGroups = groupStore.entities()
          var allIssues = issueStore.entities()
          actionStartPage = (allAgencies.length + allGroups.length + allIssues.length) * 2
          content = this.getAll(payload, relatedEntities, allAgencies, allGroups, allIssues)
          var reportTitle = 'New Zealand’s National Plan of Action | Full report'
          break
      }

      var lastFooterMode

      var docDefinition = {
        content: content.content,
        styles: this.styles,
        defaultStyle: {
          color: '#0A262D',
          columnGap: 20,
          fontSize: 8.5,
          lineHeight: 1.2
        },
        background: function(currentPage) {
          if(currentPage == 1 && payload.type != 'action'){
            return {canvas: [
                {
                  type: 'polyline',
                  lineWidth: 2,
                  color: '#4c99da',
                  lineColor: '',
                  points: [{x: 40, y:40}, {x: 40, y:800}, {x:560, y:800}, {x: 560, y:90}, {x: 510, y:40}, {x: 40, y:40}]
                }
            ]}
          }
        },
        images: {
        },
        header: function (currentPage) {
          if(currentPage != 1){
            return {
              image: 'icon_logo_grey',
              width: 25,
              alignment: 'right',
              margin: [0, 30, 30, 0]
            }
          }
        },
        footer: function(currentPage, pageCount, footerMode) {
          switch (footerMode) {
            case 'action':
              if(lastFooterMode != footerMode) {
                actionStartPage = currentPage - 1
              }
              lastFooterMode = 'action'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: ['size7', 'grey']},
                  {text: 'B|' + (currentPage - actionStartPage).toString(),
                  alignment: 'right',
                  style: ['size14', 'grey']}
                ], margin: [0, 6, 0, 0]}],
                margin: [40, 0]
              }
              break;
            case 'appendix':
              if(lastFooterMode != footerMode) {
                appendixStartPage = currentPage - 1
              }
              lastFooterMode = 'appendix'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: ['size7', 'grey']},
                  {text: 'C|' + (currentPage - appendixStartPage).toString(),
                  alignment: 'right',
                  style: ['size14', 'grey']}
                ], margin: [0, 6, 0, 0]}],
                margin: [40, 0]
              }
              break;
            case 'category':
              if(lastFooterMode != footerMode) {
                categoryStartPage = currentPage - 1
              }
              lastFooterMode = 'category'
              return {
                stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
                {columns: [
                  {text: reportTitle,
                  alignment: 'left',
                  style: ['size7', 'grey']},
                  {text: 'A|' + (currentPage - categoryStartPage).toString(),
                  alignment: 'right',
                  style: ['size14', 'grey']}
                ], margin: [0, 6, 0, 0]}],
                margin: [40, 0]
              }
              break;
          }
        }
      }

      var dataUrlCount = 0
      var onSuccess = function(e){
        dataUrlCount ++
        if(dataUrlCount == _.size(loadImages)){
          pdfMake.createPdf(docDefinition).download()
        }
      };
      var onError = function(e) {
        console.log(e.message)
      }

      var loadImages = {
        icon_arrow_dark: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_arrow-dark.png', onSuccess, onError, 'icon_arrow_dark', docDefinition),
        icon_assignable_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_assignable-yes-large.png', onSuccess, onError, 'icon_assignable_yes', docDefinition),
        icon_assignable_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_assignable-no-large.png', onSuccess, onError, 'icon_assignable_no', docDefinition),
        icon_logo_grey: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_logo-grey.png', onSuccess, onError, 'icon_logo_grey', docDefinition),
        icon_logo_white: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_logo-white.png', onSuccess, onError, 'icon_logo_white', docDefinition),
        icon_measurable_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_measurable-yes-large.png', onSuccess, onError, 'icon_measurable_yes', docDefinition),
        icon_measurable_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_measurable-no-large.png', onSuccess, onError, 'icon_measurable_no', docDefinition),
        icon_rec_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_rec-no-large.png', onSuccess, onError, 'icon_rec_no', docDefinition),
        icon_rec_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_rec-yes-large.png', onSuccess, onError, 'icon_rec_yes', docDefinition),
        icon_result_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_result-yes-large.png', onSuccess, onError, 'icon_result_yes', docDefinition),
        icon_result_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_result-no-large.png', onSuccess, onError, 'icon_result_no', docDefinition),
        icon_smart_key_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_smart-key-yes.png', onSuccess, onError, 'icon_smart_key_yes', docDefinition),
        icon_smart_key_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_smart-key-no.png', onSuccess, onError, 'icon_smart_key_no', docDefinition),
        icon_specific_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_specific-yes-large.png', onSuccess, onError, 'icon_specific_yes', docDefinition),
        icon_specific_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_specific-no-large.png', onSuccess, onError, 'icon_specific_no', docDefinition),
        icon_time_yes: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_time-yes-large.png', onSuccess, onError, 'icon_time_yes', docDefinition),
        icon_time_no: this.getImageDataURL('img/pdf-icons/NPA-pdf-icons_time-no-large.png', onSuccess, onError, 'icon_time_no', docDefinition),
      }
    })
  },

  getAction: function (action) {
    var issues = referencing(this.flux,
      {
        entity: action,
        attr: "issues",
        to: "issues"
      }
    )
    var issuesTitle = this.flux.store('issues').getTitle(issues.length)
    var groups = referencing(this.flux,
      {
        entity: action,
        attr: "groups",
        to: "groups"
      }
    )
    var groupsTitle = this.flux.store('groups').getTitle(groups.length)
    var agencies = referencing(this.flux,
      {
        entity: action,
        attr: "agencies",
        to: "agencies"
      }
    )
    var agenciesTitle = this.flux.store('agencies').getTitle(agencies.length)

    var actionContent = {
      content: [
        {text: 'Action #' + action.id, style: ['size18', 'bold'], margin: [0, 56, 0, 0]},
        {text: action.title, style: ['size18'], margin: [0, 12, 0, 0]},
        {
          columns: [
            {
              stack: [
                {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 300, y2: 5, lineWidth: 0.5 }], margin: [0, 18, 0, 0]},
                (!_.isEmpty(action.description)) ? {text: 'DESCRIPTION', style: ['blue', 'bold'], margin: [0, 12, 0, 0]} : {text: ''},
                parseHTML(marked(action.description)),
                !_.isEmpty(action.desiredoutcome) ? {text: 'DESIRED OUTCOME', style: ['blue', 'bold'], margin: [0, 10]} : {text: ''},
                parseHTML(marked(action.desiredoutcome)),
                !_.isEmpty(action.measures) ? {text: 'MEASURES', style: ['blue', 'bold'], margin: [0, 10]} : {text: ''},
                parseHTML(marked(action.measures)),
                {text: 'TARGET DATE', style: ['blue', 'bold'], margin: [0, 10]},
                !_.isEmpty(action.targetdate) ? {text: action.targetdate} : {text: action.targetdatecomment},
              ],
              width: '66%'
            },
            [
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineWidth: 0.5 }], margin: [0, 18, 0, 0]},
              {text: [{text: 'SMART ', style: 'bold'}, {text: 'criteria'}], margin: [0, 12, 0, 0]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 6, 0, 0]},
              {columns: [
                {width: '70%', text: [{text: 'Specific | ' }, {text: action.isspecific ? 'MET' : 'Not met', style: ['size7_5', action.isspecific ? 'green' : 'grey']}], margin: [0, 12, 0, 0]},
                {stack: [{image: action.isspecific ? 'icon_specific_yes' : 'icon_specific_no', width: 26}], margin: [0, 6, 0, 0]}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {columns: [
                {width: '70%', text: [{text: 'Measurable | ' }, {text: action.ismeasurable ? 'MET' : 'Not met', style: ['size7_5', action.ismeasurable ? 'green' : 'grey']}], margin: [0, 12, 0, 0]},
                {stack: [{image: action.ismeasurable ? 'icon_measurable_yes' : 'icon_measurable_no', width: 26}], margin: [0, 6, 0, 0]}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {columns: [
                {width: '70%', text: [{text: 'Assignable | ' }, {text: action.isassignable ? 'MET' : 'Not met', style: ['size7_5', action.isassignable ? 'green' : 'grey']}], margin: [0, 12, 0, 0]},
                {stack: [{image: action.isassignable ? 'icon_assignable_yes' : 'icon_assignable_no', width: 26}], margin: [0, 6, 0, 0]}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {columns: [
                {width: '70%', text: [{text: 'Result-oriented | ' }, {text: action.isresultsoriented ? 'MET' : 'Not met', style: ['size7_5', action.isresultsoriented ? 'green' : 'grey']}], margin: [0, 12, 0, 0]},
                {stack: [{image: action.isresultsoriented ? 'icon_result_yes' : 'icon_result_no', width: 26}], margin: [0, 6, 0, 0]}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {columns: [
                {width: '70%', text: [{text: 'Time-bound | ' }, {text: action.istimebound ? 'MET' : 'Not met', style: ['size7_5', action.istimebound ? 'green' : 'grey']}], margin: [0, 12, 0, 0]},
                {stack: [{image: action.istimebound ? 'icon_time_yes' : 'icon_time_no', width: 26}], margin: [0, 6, 0, 0]}
              ]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineWidth: 0.5 }]},
              {text: [{text: 'ACTION ', style: 'bold'}, {text: 'categories'}], margin: [0, 12, 0, 0]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 6, 0, 0]},
              {text: issuesTitle, margin: [0, 12, 0, 0]},
              {text: this.makeCategoryList(issues) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {text: groupsTitle, margin: [0, 12, 0, 0]},
              {text: this.makeCategoryList(groups) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
              {text: agenciesTitle, margin: [0, 12, 0, 0]},
              {text: this.makeCategoryList(agencies) , style: 'blue'},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineWidth: 0.5 }]},
              {text: [{text: 'Related UPR Recommendations ', style: 'bold'}, {text: '2014'}], margin: [0, 12, 0, 0]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 160, y2: 5, lineWidth: 0.5 }], margin: [0, 6, 0, 0]},
              {text: 'No.', margin: [0, 12, 0, 0]},
              {text: action.recommendations.toString().replace(/,/g, ', '), style: 'blue'}
            ]
          ],
          pageBreak: 'after',
          footerMode: 'action'
        }
      ]
    }
    return actionContent
  },

  makeCategoryList: function(categories){
    return _.map(categories,function(cat){ return cat.title }).join(', ')
  },


  getRecommendations: function (recs) {
    var content = {
      stack: [
        {text: 'INDEX: ALL UPR RECOMMENDATIONS', style: ['size10', 'grey', 'bold'], margin: [0, 56, 0, 0]},
        {
          text: recs.length + ' UPR Recommendations',
          style: ['size26', 'bold'],
          margin: [0, 0, 0, 0],
          footerMode: 'appendix'
        },
        {columns: [
          {width: '6%', text: 'NO.', style: ['size6', 'grey', 'bold'], alignment: 'right', margin: [0, 0, 7, 0]},
          {width: '79%', text: 'UPR RECOMMENDATIONS', style: ['size6', 'grey', 'bold']},
          {width: '7%', text: 'ADDRESSED', style: ['size6', 'grey', 'bold']},
          {width: '7%', text: 'RESPONSE', style: ['size6', 'grey', 'bold']},
        ], margin: [0, 24, 0, 0], columnGap: 1},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineWidth: 0.5 }]},
        {columns: [
          {width: '85%', text: '', style: ['size5_2']},
          {width: '7%', text: 'Addressed', style: ['size5_2']},
          {width: '7%', text: 'Accepted', style: ['size5_2']},
          {image: 'icon_rec_yes', width: 7}
        ], columnGap: 1, margin: [0, 3, 0, 0]},
        {columns: [
          {width: '85%', text: '', style: ['size5_2']},
          {width: '7%', text: 'Not addressed', style: ['size5_2']},
          {width: '7%', text: 'Not accepted', style: ['size5_2']},
          {image: 'icon_rec_no', width: 7}
        ], columnGap: 1},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 3, 0, 0]},

      ]
    }

    var recsIndex = _.map(recs, function (value, key) {
      var tableOfContents = {
        stack: [
          {columns: [
            {width: '6%', text: value.id, style: ['size10', 'bold'], alignment: 'right', margin: [0, 8, 7, 0]},
            {width: '79%', text: value.title, style: ['size7_5'], margin: [0, 4, 0, 0]},
            //  Need to pull in master branch to get this going
          //  {image: this.getRelatedActionsLength(value) > 0 ? 'icon_rec_yes' : 'icon_rec_no', width: 20},
            {width: '7%', stack: [{image: value.response == 'accepted' ? 'icon_rec_yes' : 'icon_rec_no', width: 20}], margin: [0, 4, 0, 0]},
            {width: '7%', stack: [{image: value.response == 'accepted' ? 'icon_rec_yes' : 'icon_rec_no', width: 20}], margin: [0, 4, 0, 0]},
          ], columnGap: 1},
          {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]}
        ],
        footerMode: 'appendix'
      }
      return tableOfContents
    }, this)

    return [content, recsIndex]
  },

  getRelatedActionsLength: function (rec) {
    var actions = referencing(this.flux, {
      entity : rec,
      attr : 'recommendations',
      to : 'actions'
    })
    return _.size(actions)
  },

  getCategory: function (payload, category, type) {
    var relatedEntities = referencing(this.flux, {
      entity: category,
      attr: type,
      from: 'actions'
    })

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var recs = referencing(this.flux, {
      entity : category,
      attr : type,
      from : 'recommendations'
    })

    var categoryContent = {
      content: [
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 455, y2: 5, lineWidth: 0.5, lineColor: '#ffffff' }], margin: [30, 68, 0, 0]},
        {text: "New Zealand's National Plan of Action", style: ["white", "size12", "bold"], margin: [30, 12, 0, 0]},
        {text: "For the Protection and Promotion of Human Rights", style: ["white", "size12"], margin: [30, 6, 0, 0]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 455, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 24, 0, 0]},
        {text: type.toUpperCase() + ' REPORT', style: ["white", "size10", "bold"], margin: [30, 12, 0, 0]},
        {text: category.title, style: ['size34', 'white'], margin: [30, 12, 30, 0]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 120, 0, 0]},
        {text: 'IN THIS REPORT:', style: ["white", "size10", "bold"], margin: [30, 12, 0, 0]},
        {text: 'Section A', style: ["white", "bold"], margin: [30, 12, 0, 0]},
        {columns: [{text: category.title, style: ["white"], margin: [30, 0, 0, 0], width: '35%'}]},
        {text: 'Section B', style: ["white", "bold"], margin: [30, 12, 0, 0]},
        {text: relatedEntities.length + ' Government Actions', style: "white", margin: [30, 0, 0, 0]},
        {text: 'Section C', style: ["white", "bold"], margin: [30, 12, 0, 0]},
        {text: recs.length + ' UPR Recommendations', style: "white", margin: [30, 0, 0, 12]},
        {columns: [
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {text: [{text:'DATE ', style: ["white", "bold"]}, {text: moment().format('DD/MM/YYYY'), style: "white"}], margin: [30, 12, 0, 0]},
            {text: [{text:'ISBN', style: ["white", "bold"]}, {text: '978-3-16-148410-0', style: "white"}], margin: [30, 0, 0, 12]},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {text: 'npa.hrc.co.nz', style: ['size21', "white", 'bold'], margin: [30, 12, 0, 0]}
          ], width: '50%'},
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {image: 'icon_logo_white', width: 150, margin: [30, 12, 0, 0]}
          ], width: '50%'}
        ],
        pageBreak: 'after', footerMode: 'category'},
        this.getCategoryContent(category, payload.type, relatedEntities, relatedEntities).category,
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    categoryContent.content.push(this.getRecommendations(recs))

    return categoryContent
  },

  getCategoryContent: function (category, type, relatedEntities, allActions) {
    var pageNum = 0
    var indexOfActions = _.map(allActions, function(value, key) {
      pageNumToUse = pageNum + 1
      pageNum += _.isEmpty(value.printnoofpages) ? 1 : +value.printnoofpages
      return {id: value.id, pageNum: pageNumToUse}
    })

    var relatedEntitiesIndex = _.map(relatedEntities, function (value, key) {
      var tableOfContents = {
        stack: [
          {columns: [
            {width: '5%', text: value.id, style: 'size10', margin: [10, 10, 0, 0]},
            {width: '68%', text: value.title, style: 'size7_5', margin: [0, 6, 0, 0]},
            {stack: [{image: value.isspecific ? 'icon_specific_yes' : 'icon_specific_no', width: 20, style: 'size7_5'}], width: '3%', margin: [0, 6, 0, 0]},
            {stack: [{image: value.ismeasurable ? 'icon_measurable_yes' : 'icon_measurable_no', width: 20,style: 'size7_5'}], width: '3%', margin: [0, 6, 0, 0]},
            {stack: [{image: value.isassignable ? 'icon_assignable_yes' : 'icon_assignable_no', width: 20,style: 'size7_5'}], width: '3%', margin: [0, 6, 0, 0]},
            {stack: [{image: value.isresultoriented ? 'icon_result_yes' : 'icon_result_no', width: 20,style: 'size7_5'}], width: '3%', margin: [0, 6, 0, 0]},
            {stack: [{image: value.istimebound ? 'icon_time_yes' : 'icon_time_no', width: 20,style: 'size7_5'}], width: '3%', margin: [0, 6, 0, 0]},
            {width: '5%', text: 'B', style: 'grey', style: 'size7_5', margin: [12, 12, 0, 0]},
            {width: '5%', text: _.findWhere(indexOfActions, {id: value.id}).pageNum.toString(), style: 'size7_5', margin: [12, 12, 0, 0]}
          ]},
          {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 0]}
        ]
      }
      return tableOfContents
    })

    var categoryContent = [
      {text: type.toUpperCase(), style: ['size10', 'grey', 'bold'], margin: [0, 56, 0, 0]},
      {text: category.title, style: ['size26', 'bold'], margin: [0, 6]},
      {
        columns: [
          {
            stack: [
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 325, y2: 5, lineWidth: 0.5 }], margin: [0, 24, 0, 0]},
              {text: this.structure[type].mainTitle, style: ['blue', 'bold'], margin: [0, 12, 0, 0]},
              {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 325, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 7, 0, 0]},
              {stack: parseHTML(marked(category[this.structure[type].main])), margin: [0, 12, 0, 0]}
            ],
            width: '66%'
          },
          [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 170, y2: 5, lineWidth: 0.5 }], margin: [0, 24, 0, 0]},
            {text: this.structure[type].sideTitle.toUpperCase(), style: ['green', 'bold'], margin: [0, 12, 0, 0]},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 170, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }], margin: [0, 7, 0, 0]},
            {stack: parseHTML(marked(category[this.structure[type].side])), margin: [0, 12, 0, 0]} // todo apply blue style
          ]
        ],
        pageBreak: 'after',
        footerMode: 'category'
      },
      {text: 'ACTION INDEX | ' + type.toUpperCase() + ": " + category.title.toUpperCase(), style: ['size10', 'grey', 'bold'], margin: [0, 56, 0, 0]},
      {text: relatedEntities.length + ' related Actions', style: ['size26', 'bold'], margin: [0, 0]},
      { columns: [
        {text: 'ID#', style: ['size6', 'grey'], width: '5%'},
        {text: 'GOVERNMENT ACTION', style: ['size6', 'grey'], width: '55%'},
        {text: 'SMART CRITERIA', style: ['size6', 'grey'], width: '30%'},
        {text: 'SECTION', style: ['size6', 'grey'], width: '5%'},
        {text: 'PAGE', style: ['size6', 'grey'], width: '5%'}
      ], margin: [0, 24, 0, 0]},
      {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineWidth: 0.5 }]},
      { columns: [
        {text: '', style: 'size5_2', width: '60%'},
        {text: 'Specific', style: 'size5_2', width: '5.5%'},
        {text: 'Measurable', style: 'size5_2', width: '5.5%'},
        {text: 'Assignable', style: 'size5_2', width: '5.5%'},
        {text: 'Result-\nOriented', style: 'size5_2', width: '5.5%'},
        {text: 'Time-\nBound', style: 'size5_2', width: '5.5%'},
        {stack: [{text: 'Met', style: 'size5_2', alignment: 'right'}, {text: 'Not met', style: 'size5_2', alignment: 'right'}]},
        {stack: [{image: 'icon_smart_key_yes', width: 7}, {image: 'icon_smart_key_no', width: 7}], width: 7}
      ], margin: [0, 6, 0, 0], columnGap: 2},
      {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
      {stack: relatedEntitiesIndex, pageBreak: 'after', footerMode: 'category'}
    ]

    return {category: categoryContent, pageLength: 0}
  },

  getAll: function (payload, relatedEntities, allAgencies, allGroups, allIssues) {
    var relatedGroupEntities = _.map(allGroups, function (value, key) {
      var relatedGroupActions = referencing(this.flux, {
          entity: value,
          attr: 'groups',
          from: 'actions'
        })
      var category = this.getCategoryContent(value, 'group', relatedGroupActions, relatedEntities)
      return category.category
    }, this)

    var relatedIssueEntities = _.map(allIssues, function (value, key) {
      var relatedIssueActions = referencing(this.flux, {
          entity: value,
          attr: 'issues',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'issue', relatedIssueActions, relatedEntities)
      return category.category
    }, this)

    var relatedAgencyEntities = _.map(allAgencies, function (value, key) {
      var relatedAgencyActions = referencing(this.flux, {
          entity: value,
          attr: 'agencies',
          from: 'actions'
        })
      category = this.getCategoryContent(value, 'agency', relatedAgencyActions, relatedEntities)
      return category.category
    }, this)

    var relatedEntitiesAction = _.map(relatedEntities, function (value, key) {
      return {stack: this.getAction(value).content}
    }, this)

    var allContent = {
      content: [
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 455, y2: 5, lineWidth: 0.5, lineColor: '#ffffff' }], margin: [30, 68, 0, 0]},
        {text: "New Zealand's National Plan of Action", style: ["white", "size12", "bold"], margin: [30, 12, 0, 0]},
        {text: "For the Protection and Promotion of Human Rights", style: ["white", "size12"], margin: [30, 6, 0, 0]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 455, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 24, 0, 0]},
        {text: 'FULL REPORT', style: ["white", "size10", "bold"], margin: [30, 12, 0, 0]},
        {text: 'National Plan of Action', style: ['size34', 'white'], margin: [30, 12, 30, 0]},
        {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 120, 0, 0]},
        {text: 'IN THIS REPORT:', style: ["white", "size10", "bold"], margin: [30, 12, 0, 0]},
        {text: 'Section A', style: ["white", "bold"], margin: [30, 12, 0, 0]},
        {text: 'Analysis by Issue, Population Group and Government Agency', style: ["white"], margin: [30, 0, 0, 0], width: '35%'},
        {text: 'Section B', style: ["white", "bold"], margin: [30, 12, 0, 0]},
        {text: relatedEntitiesAction.length + ' Government Actions', style: ["white"], margin: [30, 0, 0, 0]},
        {columns: [
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {text: [{text:'DATE ', style: ["white", "bold"]}, {text: moment().format('DD/MM/YYYY'), style: "white"}], margin: [30, 12, 0, 0]},
            {text: [{text:'ISBN', style: ["white", "bold"]}, {text: '978-3-16-148410-0', style: "white"}], margin: [30, 0, 0, 12]},
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {text: 'npa.hrc.co.nz', style: ['size21', "white", 'bold'], margin: [30, 12, 0, 0]}
          ], width: '50%'},
          {stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520 * 0.4, y2: 5, lineWidth: 0.5, lineColor: '#ffffff'  }], margin: [30, 12, 0, 0]},
            {image: 'icon_logo_white', width: 150, margin: [30, 12, 0, 0]}
          ], width: '50%'}
        ],
        pageBreak: 'after', footerMode: 'category'},
        {text: 'CATEGORY: GROUPS', style: 'size26', margin: [0, 20]},
        {
          stack: relatedGroupEntities,
          pageBreak: 'after',
          footerMode: 'category'

        },
        {text: 'CATEGORY: ISSUES', style: 'size26', margin: [0, 20]},
        {
          stack: relatedIssueEntities,
          pageBreak: 'after',
          footerMode: 'category'
        },
        {text: 'CATEGORY: AGENCIES', style: 'size26', margin: [0, 20]},
        {
          stack: relatedAgencyEntities,
          pageBreak: 'after',
          footerMode: 'category',
        },
        {stack: relatedEntitiesAction, footerMode: 'action'}
      ]
    }

    return allContent
  },

  getImageDataURL: function(url, success, error, name, docDefinition) {
    var data, canvas, ctx;
    var img = new Image();
    img.onload = function(){
        // Create the canvas element.
        canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        // Get '2d' context and draw the image.
        ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        // Get canvas data URL
        try{
            data = canvas.toDataURL();
            docDefinition.images[name] = data
            success({image:img, data:data});
        }catch(e){
            error(e);
        }
    }
    // Load image URL.
    try{
        img.src = url;
    }catch(e){
        error(e);
    }
  },
})

module.exports = PrintStore
