// helpers
var _ = require('lodash')

module.exports = function (data, type) {
  
  var elements = {    
    header : function(supTitle,type) {
      switch (type) {
        case 'all' :      
        case 'action' :      
          return {
            columns : [
              {
                stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
                width:427
              },
              {
                table : {
                  widths: [ '100%'],
                  body : [
                    [{ text: 'APPENDIX', style : 'pageIdTableCellTypeRec' }],
                  ]
                },
                layout: 'noBorders',
                style : 'pageIdTable',
                width:63
              }
            ]
          }
          break
        case 'issue' :        
          return {
            columns : [
              {
                stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
                width:427
              },
              {
                image : 'cat-issues-white',
                width:63
              }
            ]
          }
          break
        case 'group' :        
          return {
            columns : [
              {
                stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
                width:427
              },
              {
                image : 'cat-groups-white',
                width:63
              }
            ]
          }
          break
      }    
    }
  }
  if (data.list.length === 0) {
    return [
      elements.header(data.supTitle,type),
      {
        text: data.title,
        style: 'itemTitleRecTable'
      },
      {
        text: 'No UPR Recommendations have been identified',style:{italics:true}
      }
    ] 
  } else {  
    return [
      elements.header(data.supTitle,type),
      {
        text: data.title,
        style: 'itemTitleRecTable'
      },
      {
        table : {
          widths: [ 24,383,43, 52],
          headerRows : 2,
          dontBreakRows: true,
          body : [
            [ 
              { text: 'No.', style : 'tableHeader', alignment:'right' },
              { text: 'UPR Recommendations', style : 'tableHeader' },
              { text: 'Addressed', style : 'tableHeader' },
              { text: 'Response', style : 'tableHeader' }          
            ],
            [ 
              { text: ''},
              { text: ''},
              {
                stack : [
                  {text:'Addressed'},
                  {text:'Not addressed'},
                ],
                style : 'tableKey'
              },
              {
                columns : [
                  {
                    stack : [                
                      {text:'Accepted'},
                      {text:'Not accepted'},
                    ],
                    width: 43,
                    style : 'tableKey'                  
                  },
                  {
                    stack : [
                      {image:'pass-active',width:7,margin:[0,2,0,0]}, 
                      {image:'fail-active',width:7,margin:[0,2,0,0]} 
                    ]
                  }
                ],
                columnGap: 0
              },
            ],

          ].concat(
            _.map(data.list,function(rec){
              return [
                {text:rec.id, style: 'cellId', alignment:'right'},
                {text:rec.title , style: 'cellTitle'},
                {image:rec.addressed ? 'pass-active': 'fail-active', width:20, style: 'cellIcon'},
                {image:rec.accepted ? 'pass-active': 'fail-active', width:20, style: 'cellIcon'}              
              ]
            }))
        },
        style:{fillColor:'#ffffff'},
        layout: {
            hLineWidth: function(i,node) { 
              if (i === 0 || i === node.table.body.length) return 0;
              if (i === 1 ) return 0.6;
              return 0.4
            },
          vLineWidth: function(i) { return 0; },
          hLineColor: function(i) { return '#B5BEC0'},
          paddingLeft: function(i) { return i === 1 ? 8 : 0 },
          paddingRight: function(i) { return 0 }
        },
        width:'100%'
      }
    ]
  }
  
 
}
