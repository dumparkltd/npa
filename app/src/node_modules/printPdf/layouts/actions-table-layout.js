// helpers
var _ = require('lodash')

module.exports = function (data, type, elements) {
  
  var customElements = {    
    header : function(supTitle,type) {
      var idIcon
      
      if (type === 'custom'){
        return {
          columns : [
            {
              stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
              width:427
            }
          ]
        }  
      } else {
        switch (type) {
          case 'issue' :        
            idIcon = 'cat-issues-white'
            break
          case 'group' :        
            idIcon = 'cat-groups-white'
            break
          case 'agency' :        
            idIcon = 'cat-agencies-white'
            break
        }    
        return {
          columns : [
            {
              stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
              width:427
            },
            {
              image : idIcon,
              width:63
            }
          ]
        }     
      }
    }
  }
  elements = _.extend (elements,customElements)
  
  return [
    elements.header(data.supTitle,type),
    {
      text: data.title,
      style: 'itemTitleRecTable'
    },
    {
      table : {
        widths: [ 24, 'auto',40,40,40,40,40, 40],
        headerRows : 2,
        dontBreakRows: true,
        body : [
          [ 
            { text: 'ID', style : 'tableHeader', alignment:'right' },
            { text: 'Government Actions', style : 'tableHeader' },
            { text: 'SMART criteria', style : 'tableHeader', colSpan:3},
            '',
            '',            
            { text: 'Met/Not Met', style : 'tableHeader', colSpan:2 },
            '',          
            { text: 'Page', style : 'tableHeader' }
          ],
          [ 
            { text: ''},
            { text: ''},
            { text: 'Specific', style:['tableHeaderSub']},
            { text: 'Measureable', style:['tableHeaderSub']},
            { text: 'Assignable', style:['tableHeaderSub']},
            { text: 'Results-oriented', style:['tableHeaderSub']},
            { text: 'Time-bound', style:['tableHeaderSub']},            
            { text: ''},                        
          ]
          
        ]
        .concat(
          _.map(data.list,function(action){
            return [
              {text:action.id, style: 'cellId', alignment:'right'},
              {text:action.title , style: 'cellTitle'},          
              {image:action.isspecific ? 'smart-s-pass-active': 'smart-s-fail-active', width:25, style: 'cellIcon'},
              {image:action.ismeasurable ? 'smart-m-pass-active': 'smart-m-fail-active', width:25, style: 'cellIcon'},
              {image:action.isassignable ? 'smart-a-pass-active': 'smart-a-fail-active', width:25, style: 'cellIcon'},
              {image:action.isresultoriented ? 'smart-r-pass-active': 'smart-r-fail-active', width:25, style: 'cellIcon'},
              {image:action.istimebound ? 'smart-t-pass-active': 'smart-t-fail-active', width:25, style: 'cellIcon'},               
              {text:'B | ' + action.pageNo, style: 'cellPageRef'}              
            ]
          }) 
        )
      },
      layout: {
        hLineWidth: function(i,node) { 
          if (i === 0 || i === node.table.body.length) return 0;
          if (i === 1 ) return 1;
          return 0.5;
        },
        vLineWidth: function(i) { return 0; },
        hLineColor: function(i) { return '#869497'},
        paddingLeft: function(i) { return i === 1 ? 8 : 0 },
        paddingRight: function(i) { return 0 }
      },
      width:'100%'
    }
  ]
  
 
}
