// helpers
var _ = require('lodash')

module.exports = function (data, type) {
  
  var elements = {    
    header : function(supTitle,type) {
      var idIcon
      
      if (type === 'custom'){
        return {
          columns : [
            {
              stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
              width:427
            }
          ]
        }  
      } else {
        switch (type) {
          case 'issue' :        
            idIcon = 'cat-issues-white'
            break
          case 'group' :        
            idIcon = 'cat-groups-white'
            break
          case 'agency' :        
            idIcon = 'cat-agencies-white'
            break
        }    
        return {
          columns : [
            {
              stack: [ { text: supTitle.toUpperCase(), style: 'itemSupTitle' } ],
              width:427
            },
            {
              image : idIcon,
              width:63
            }
          ]
        }     
      }
    }
  }
  
  if (data.list.length === 0) {
    return [
      elements.header(data.supTitle,type),
      {
        text: data.title,
        style: 'itemTitleRecTable'
      },
      {
        text: 'No actions have been specified',style:{italics:true}
      }
    ] 
  } else {
  
    return [
      elements.header(data.supTitle,type),
      {
        text: data.title,
        style: 'itemTitleRecTable'
      },
      {
        table : {
          widths: [ 24, 'auto',35,35,35,35,35, 30],
          headerRows : 2,
          dontBreakRows: true,
          body : [
            [ 
              { text: 'ID', style : 'tableHeader', alignment:'right' },
              { text: 'Government Actions', style : 'tableHeader' },            
              { columns : [
                  {text: 'SMART criteria', style : 'tableHeader',width:60},           
                  { columns : [
                    {image:'smart-s-pass-active', width:7},
                    {text: 'Met', style : ['tableHeader','tableKey']}
                  ],
                  margin:[0,2,0,0],
                  width:20,
                  columnGap: 2},
                  { columns : [
                    {image:'smart-s-fail-active', width:7},
                    {text: 'Not Met', style :['tableHeader','tableKey'] }
                  ],
                  margin:[0,2,0,0],
                  width:'auto',
                  columnGap: 2}
                ],
                colSpan:5,
                margin:[7,0,0,0],
                columnGap: 5
              },         
              '','','','',
              { text: 'Page', style : ['tableHeader','tableHeaderPageRef'] }
            ],
            [ 
              { text: ''},
              { text: ''},
              { text: 'Specific', style:['tableHeaderSub'],margin:[0,4,0,0]},
              { text: 'Measureable', style:['tableHeaderSub'],margin:[0,4,0,0]},
              { text: 'Assignable', style:['tableHeaderSub'],margin:[0,4,0,0]},
              { text: 'Results-\noriented', style:['tableHeaderSub']},
              { text: 'Time-\nbound', style:['tableHeaderSub']},            
              { text: ''},                        
            ]

          ]
          .concat(
            _.map(data.list,function(action){
              return [
                {text:action.id, style: 'cellId', alignment:'right'},
                {text:action.title , style: 'cellTitle'},          
                {image:action.isspecific ? 'smart-s-pass-active': 'smart-s-fail-active', width:20, style: 'cellIcon'},
                {image:action.ismeasurable ? 'smart-m-pass-active': 'smart-m-fail-active', width:20, style: 'cellIcon'},
                {image:action.isassignable ? 'smart-a-pass-active': 'smart-a-fail-active', width:20, style: 'cellIcon'},
                {image:action.isresultoriented ? 'smart-r-pass-active': 'smart-r-fail-active', width:20, style: 'cellIcon'},
                {image:action.istimebound ? 'smart-t-pass-active': 'smart-t-fail-active', width:20, style: 'cellIcon'},               
                {text:'B | ' + action.pageNo, style: 'cellPageRef'}              
              ]
            }) 
          )
        },
        style:{fillColor:'#ffffff'},
        layout: {
          hLineWidth: function(i,node) { 
            if (i === 0 || i === node.table.body.length) return 0;
            if (i === 1 ) return 2;
            return 1
          },
          vLineWidth: function(i) { return 0; },
          hLineColor: function(i) { return '#869497'},
          paddingLeft: function(i) { return i === 1 ? 8 : 0 },
          paddingRight: function(i) { return 0 }
        },
        width:'100%'
      }
    ]
  }
  
 
}
