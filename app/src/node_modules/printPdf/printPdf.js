// helpers
var _ = require('lodash')
var $script  = require('scriptjs')

// util
var parseHTML = require('./parse-html')
var getImageDataUrl = require('./getImageDataUrl')

// layouts
var actionLayout = require('./layouts/action-layout')
var recommendationsLayout = require('./layouts/recommendations-layout')
//var categoryLayout = require('utils/print/category-layout')
//var categoryContentLayout = require('utils/print/categorycontent-layout')
//var allLayout = require('utils/print/all-layout')

module.exports = function (report) {
  
  
  // define some styles
  // todo pull from json file
  var defaultStyles = {
    color: '#0A262D',
    columnGap: 20,
    fontSize: 8.5,
    lineHeight: 1.2
  }
   var styles = {
    size34: {fontSize: 34},
    size26: {fontSize: 26},
    size21: {fontSize: 21},
    size18: {fontSize: 18},
    size14: {fontSize: 14},
    size12: {fontSize: 12},
    size10: {fontSize: 10},
    size8_5: {fontSize: 8.5},
    size7_5: {fontSize: 7.5},
    size7: {fontSize: 7},
    size6: {fontSize: 6},
    size5_2: {fontSize: 5.2},
    grey: {color: '#9DA8AB'},
    blue: {color: '#039CE6'},
    green: {color: '#69A31F'},
    white: {color: '#ffffff'},
    bold: {bold: true}
  }
  var images = {
     action : [
       { name : 'smart-s-pass-active' },
       { name : 'smart-s-fail-active' },
       { name : 'smart-m-pass-active' },
       { name : 'smart-m-fail-active' },
       { name : 'smart-a-pass-active' },
       { name : 'smart-a-fail-active' },
       { name : 'smart-r-pass-active' },
       { name : 'smart-r-fail-active' },
       { name : 'smart-t-pass-active' },
       { name : 'smart-t-fail-active' },
     ]
   }
  
  var content,
    category,
    relatedEntities,
    categoryStartPage,
    actionStartPage


    // prepare report data based on report type
  switch (report.type) {
    // single action report
    case 'action' :
      content = actionLayout(report.data.actionData)
//      content.push(recommendationsLayout(report.data.recommendationsTable))
      loadImages(images.action)
      var reportTitle = 'New Zealand’s National Plan of Action | Action report | Action: ' + report.data.actionData.title

      break

        // issue category report
//        case 'issue' :
//          content = this.getCategory(payload, category, 'issues')
//          reportTitle = 'New Zealand’s National Plan of Action | Category report | Issue: ' + category.title
//          break
//        // group category report
//        case 'group' :
//          content = this.getCategory(payload, category, 'groups')
//          reportTitle = 'New Zealand’s National Plan of Action | Category report | Group: ' + category.title
//          break
//        // agency category report
//        case 'agency' :
//          content = this.getCategory(payload, category, 'agencies')
//          reportTitle = 'New Zealand’s National Plan of Action | Category report | Agency: ' + category.title
//          break
//        // full report
//        case 'all' :
//
//          content = this.getAll(payload, relatedEntities, allAgencies, allGroups, allIssues)
//          reportTitle = 'New Zealand’s National Plan of Action | Full report'
//          break
//        // custom filtered report
//        case 'filtered' :
//          break
  }

  var lastFooterMode

  // the document definition object
  var docDefinition = {
    images : {},
    content: content,
    styles: styles,
    defaultStyle: defaultStyles,
    background: function (currentPage) {
      // title page if not single action report
      if (currentPage === 1 && report.type !== 'action'){
        return {canvas: [
          {
            type: 'polyline',
            lineWidth: 2,
            color: '#4c99da',
            lineColor: '',
            points: [{x: 40, y: 40}, {x: 40, y: 800}, {x: 560, y: 800}, {x: 560, y: 90}, {x: 510, y: 40}, {x: 40, y: 40}]
          }
        ]}
      }
    },
    images: {},
    header: function (currentPage) {
//      if (currentPage !== 1) {
//        return {
//          image: 'smart-s-pass',
//          width: 25,
//          alignment: 'right',
//          margin: [0, 30, 30, 0]
//        }
//      }
    },
    footer: function (currentPage, pageCount, footerMode) {
      switch (footerMode) {
        case 'action':
          if (lastFooterMode !== footerMode) {
            actionStartPage = currentPage - 1
          }
          lastFooterMode = 'action'
          return {
            stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
            {columns: [
              {text: reportTitle,
              alignment: 'left',
              style: ['size7', 'grey']},
              {text: 'B|' + (currentPage - actionStartPage).toString(),
              alignment: 'right',
              style: ['size14', 'grey']}
            ], margin: [0, 6, 0, 0]}],
            margin: [40, 0]
          }
        case 'appendix':
          if (lastFooterMode !== footerMode) {
            var appendixStartPage = currentPage - 1
          }
          lastFooterMode = 'appendix'
          return {
            stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
            {columns: [
              {text: reportTitle,
              alignment: 'left',
              style: ['size7', 'grey']},
              {text: 'C|' + (currentPage - appendixStartPage).toString(),
              alignment: 'right',
              style: ['size14', 'grey']}
            ], margin: [0, 6, 0, 0]}],
            margin: [40, 0]
          }
        case 'category':
          if (lastFooterMode !== footerMode) {
            categoryStartPage = currentPage - 1
          }
          lastFooterMode = 'category'
          return {
            stack: [
            {canvas: [{ type: 'line', x1: 0, y1: 5, x2: 520, y2: 5, lineColor: '#9aa6a6', lineWidth: 0.5 }]},
            {columns: [
              {text: reportTitle,
              alignment: 'left',
              style: ['size7', 'grey']},
              {text: 'A|' + (currentPage - categoryStartPage).toString(),
              alignment: 'right',
              style: ['size14', 'grey']}
            ], margin: [0, 6, 0, 0]}],
            margin: [40, 0]
          }
      }
    }
  }  
  // wait for images to be loaded before printing pdf
  

  
  waitForImages(
    images[report.type],
    function(){      
      $script('js/pdfmake.min.js',function(){
        $script('js/vfs_fonts.js', function(){              
          pdfMake.createPdf(docDefinition).download()
        })
      })
    },
    function (e) {
      console.log(e.message)
    }
  )     
 
  
//  var dataUrlCount = 0
//  var onSuccess = function (e) {
//    docDefinition.images[e.name] = e.data
//    dataUrlCount++
//    if (dataUrlCount === _.size(loadImages)) {
//      // finally load print scripts and print pdf
//      $script(['js/pdfmake.min.js', 'js/vfs_fonts.js'], function() {        
//        pdfMake.createPdf(docDefinition).download()                
//      }) 
//
//    }
//  }

  
  
  function loadImages(images){
    var imgPath = 'img/pdf-icons/hrc-icons_'
    _.each(images,function(img){
      getImageDataUrl(imgPath + img.name + '.png',
      function(datauri){
        img.datauri = datauri
        docDefinition.images[img.name] = datauri
      },
      function (e) {
        img.e = e
      })
    })
  }
  
  function waitForImages(images,onSuccess, onError){
    
    var success = true
    var error = false
    
    _.each(images,function(img){
      success = success && typeof img.datauri !== 'undefined'
      error = error || typeof img.e !== 'undefined'
    })
    
    if (success){
      onSuccess();
    } else if (error){
      onError(img.e);
    } else {
      setTimeout(function(){
        waitForImages(images,onSuccess, onError);
      },250);
    }
  }    
}


