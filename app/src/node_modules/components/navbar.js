//main
var React       = require('react')

// bootstrap
var Navbar          = require('react-bootstrap/lib/Navbar')
var CollapsibleNav  = require('react-bootstrap/lib/CollapsibleNav')
var Nav             = require('react-bootstrap/lib/Nav')
var NavItem         = require('react-bootstrap/lib/NavItem')

//logging
var log       	= require('debug')('components:navbar')

module.exports = React.createClass({
  initialise : function(){
    // warning: dirty hack to close navbar toggle on route change
    this.route = ''  
    this.param = ''  
    this.expanded = false    
    // end hack
  },
  getInitialState: function() {
    return {
      navExpanded: false
    };
  },            
  render: function () {
    log('props', this.props)
    
    // warning: dirty hack to close navbar toggle on route change  
    //    navExpanded will always override state in NavBar React-Bootstrap component 
   
    var expanded
    if (this.route !== this.props.route 
            || this.param !== this.props.param) {
      expanded = false
      this.route = this.props.route    
      this.param = this.props.param    
      this.expanded = false
    } else {
      expanded = this.state.navExpanded
    }
    //end hack
    
		return (
          <Navbar 
            className='hrc-navbar' 
            brand={this.props.brand}  
            toggleNavKey={0} 
            onToggle={this.handleToggle}
            defaultNavExpanded={false}   
            navExpanded={expanded}
          >
            { this.renderNavbar() }            
          </Navbar>
    )
      
    
  },
  handleToggle : function(){
    log('handleToggle', !this.state.navExpanded)
    // warning: dirty hack to close navbar toggle on route change        
    if (!this.expanded) {
      this.expanded = true
      this.setState({
        navExpanded: true
      });      
    } else {
      this.expanded = false
      this.setState({
        navExpanded: false
      });      
    }
    //end hack
    
        
  },
  renderNavbar : function(){
    return (this.props.isIntro) 
      ? null
      : <CollapsibleNav eventKey={0} expanded={false}>
        {this.renderShareNavGroup('hidden-xs')}
        {this.renderPagesNavGroup('')}
        {this.renderShareNavGroup('visible-xs')}
       </CollapsibleNav>
  },
  renderShareNavGroup : function(classes) {
    var shareClass =  'nav-item-share'
    return (
      <Nav ulClassName={"nav-group nav-group-share " + classes } navbar right>
        <NavItem eventKey={1} href={this.props.facebookShare} className="share-header-social share-header-social-facebook"  target="_blank">
          <div className="icon-social-facebook-sm"/>
        </NavItem>
        <NavItem eventKey={2} href={this.props.twitterShare} className="share-header-social share-header-social-twitter"  target="_blank">
          <div className="icon-social-twitter-sm"/>
        </NavItem>
        <NavItem eventKey={3} href='#' className={shareClass} onClick={this.props.toggleShareModal()} >
          <span className="icon-social-share"/>
          Share
        </NavItem>
      </Nav>      
    )    
  },
  renderPagesNavGroup : function(classes) {
    return (
      <Nav ulClassName={"nav-group nav-group-pages " + classes} navbar right>
        <NavItem 
            eventKey={1} 
            href='#' 
            className={'nav-item-about'} 
            onClick={this.props.handleNavClick('about')}>
          About
        </NavItem>
        <NavItem 
            eventKey={2} 
            href='#' 
            className={'nav-item-articles'} 
            onClick={this.props.handleNavClick('articles')}>
          Human Rights Articles
        </NavItem>
        <NavItem 
            eventKey={3} 
            href='#' 
            className={'nav-item-terms'} 
            onClick={this.props.handleNavClick('terms')}>
          Terms
        </NavItem>
      </Nav> 
    )    
  },
 
 
})
