var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')

// widgets
Multiselect = require('react-widgets/lib/Multiselect')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:categoryList')

var FiltersPanel = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies')
    
  ],
  propTypes : {
    type : React.PropTypes.string,
    query : React.PropTypes.object,
    filters: React.PropTypes.array,
    entities : React.PropTypes.array
  },
  getInitialState : function(){
    return {
      filtergroups : {
        cat:      {title:'Categories',type:'multiselect'},
        rec:      {title:'Recommendations',type:'multiselect'},
        action:   {title:'Actions',type:'multiselect'},        
        date:     {title:'Target date',type:'dateselect'},
        smart:    {title:'SMART criteria',type:'icon',options:['Any','Satisfied','Not satisfied']},        
        response: {title:'Government response',type:'icon',options:['Any','Accepted','Not accepted']}
      }
    }
  },  
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading() 
           ||  flux.store("recommendations").isLoading()
           ||  flux.store("issues").isLoading()
           ||  flux.store("groups").isLoading()
           ||  flux.store("agencies").isLoading()
           ||  flux.store("treatybodies").isLoading()
    }
  },  
  render: function () {    
    log('props',this.props)
        
    if (this.state.loading) {
      return (
          <Load/>
      )
    } else {    
      
      var flux = this.getFlux();

      var type = this.props.type
      var query = this.props.query
      var filters = this.props.filters
      var entities = this.props.entities

      // the filter components

      // for each filter figure out options 
      _.each(filters,function(filter){        
        
        // get options
        // if filter.type entities
        if (filter.type === 'entities') {                   
          // get all possible options for entities[filters.attr]         
          if (filter.relation === 'to') {
            // get flattened list of all values referencing a related entity (to-relation)
            var referencing = _(entities).pluck(filter.attr).flatten().uniq().value()
            // filter referenced items by referencing list
            filter.options = flux.stores[filter.attr].filter(function(item){
              return _.contains(referencing,item.id)
            })
          } else if (filter.relation === 'from') {
            // get flattened list of ids that may be referenced by a related entity (from relation)
            var referenced = _(entities).pluck('id').flatten().value()
            // filter referencing items (eg actions) by referenced list (eg recommendations)
            filter.options = flux.stores[filter.from].filter(function(item){
              return _.reduce(referenced, function(bool, referencedItem){
                var test = function(referencedItem) {return _.contains(item[filter.attr], referencedItem)}
                return ( typeof bool === 'string' ? test(bool) : bool ) || test(referencedItem)
              })
            })
          }
        // if filters.type smart or response
        } else if (filter.type === 'smart' || filter.type === 'response') { 
          // options = filtergroups.states
          filter.options = this.state.filtergroups[filter.type].options
        // if filters.type date
        } else if (filter.type === 'date') {
          // calendar dropdown
                     
        } 
      },this) // end for each 

      var timestamp = new Date().getTime()
      return (
        <Grid>
            <h5>Filters: TODO</h5>
          <Row>
            <Col sm={4}>
              <Multiselect
                key={new Date().getTime()}
                valueField='id' textField='title'
                value={query[filters[0].by]}
                data={filters[0].options}
                filter='contains'
                placeholder = {filters[0].filterlabel}
                onChange = {_.bind(function(values) {
                    this.handleMultiSelectChange(filters[0].by, _.pluck(values,'id'))
                  },this)}                
              />
            </Col>
            <Col sm={4}>
              <Multiselect
                key={new Date().getTime()}
                valueField='id' textField='title'
                value={query[filters[1].by]}
                data={filters[1].options}
                filter='contains'
                placeholder = {filters[1].filterlabel}
                onChange = {_.bind(function(values) {
                    this.handleMultiSelectChange(filters[1].by, _.pluck(values,'id'))
                  },this)}                
              />
            </Col>
            <Col sm={4}>
              <Multiselect
                key={new Date().getTime()}
                valueField='id' textField='title'
                value={query[filters[2].by]}
                data={filters[2].options}
                filter='contains'
                placeholder = {filters[2].filterlabel}
                onChange = {_.bind(function(values) {
                    this.handleMultiSelectChange(filters[2].by, _.pluck(values,'id'))
                  },this)}                
              />
            </Col>
            
          </Row>
        </Grid>
      )
    }  
  }, 
  handleMultiSelectChange : function(filter,ids) {
      log('handleRowclick',filter )
      this.getFlux().actions.multiselect(filter,ids)
  }
})

module.exports = FiltersPanel;
