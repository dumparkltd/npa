var React             = require('react')
var Fluxxor           = require('fluxxor')
var StoreWatchMixin   = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var PageNotFound      = require('components/page-not-found')
var Icon              = require('components/icon')
var FiltersPanel      = require('components/filters/FiltersPanel')
var EntityListFactory = require('components/table/EntityListFactory')
var PrintTool = require ('components/PrintTool')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')
var getColumns  = require('utils/getColumns')
var checkSMART  = require('utils/checkSMART')

//helpers
var _           = require('lodash')
var moment      = require('moment')
var log         = require('debug')('src:components:all')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues','groups','agencies','treatybodies')
  ],
  propTypes : {
    filtergroups: React.PropTypes.array,
    query: React.PropTypes.object
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('issues').isLoading()
           ||  flux.store("groups").isLoading()
           ||  flux.store("agencies").isLoading()
           ||  flux.store("treatybodies").isLoading()
    }
  },

  render: function () {
    log('props',this.props)

    var flux = this.getFlux()

    var type = this.props.type
    var query = _.clone(this.props.query)

    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {

      // grab the filter definitions from the different filter rows and groups
      var typeFilters = _(this.props.filtergroups).pluck('groups').flatten(true).pluck('filters').flatten(true).value()

      // 'collect' conditions      
      var conditions = this.getConditions(query,typeFilters)
      
      
      // filter entities according to conditions      
      var filteredEntities = conditions.length === 0 
        ? flux.stores[type].entities()
        : flux.stores[type].filter(function(item){
          return conditions.length === 1
            ? conditions[0](item)
            : _.reduce(conditions, function(bool, condition){
              return (typeof bool === 'function' ? bool(item) : bool) && condition(item)
            })
          })
      var downloadLabel = 'Download Full Report'
      // 1. Filters panel
      // 2. Filtered entity list
                
      return (
        <div role='main' >
          <section className='page-tools'>
            <FiltersPanel
              type = {type}
              query = {query}
              filterRows = {this.props.filtergroups}
              entities = {filteredEntities}
            />
          </section>
          <div role='article' className="page-content page-content-all">
            <Grid className={'page-section page-section-' + type}>
              <ul className="list-inline sup-title-tools">
                <li>            
                  <h5 className="header-type">
                    {
                      (conditions.length === 0  ? 'All ' : 'Selected ') 
                      + flux.stores[type].getTitle(2)
                    }
                  </h5>
                </li>
                <li>            
                  <h5 className="header-tool">
                    {
                      (type === 'actions' && filteredEntities.length > 0
                        ? conditions.length === 0 
                          ? (
                              <PrintTool 
                                tool = {
                                  {
                                    type:'print',
                                    label:downloadLabel,
                                    args:{
                                      type:'all',
                                      id:'all'
                                    }
                                  }
                                } 
                              />
                            ) 
                          : (
                              <PrintTool 
                                tool = {
                                  {
                                    type:'print',
                                    label:'Download Custom Report',
                                    args:{
                                      type:'custom',
                                      id:'custom',
                                      actions:filteredEntities,
                                      query:query,
                                      filters:this.props.filtergroups                                      
                                    }
                                  }
                                } 
                              />
                            )
                        : null) 
                    }
                  </h5>
                </li>
              </ul>
              <EntityListFactory
                entities = {filteredEntities} 
                type = {type}
                showEmpty = {true}
                showCount = {true}
                collapsible={true}
                maxItems={20}
                linked = {true}     
                captionAttribute = {''} 
              />
            </Grid>
          </div>
        </div>
      )     
    }
  },
  getConditions : function (query,typeFilters) {
    
      
    // the filter conditions to test
    var conditions = []
      
    // for each filter from query
    _.each(query,function(condition,key){
      // get filter definition from this.state[type]
      var typeFilter = _.find(typeFilters,{by:key})

      if (typeof typeFilter !== 'undefined') {

        if (typeFilter.type === 'entities') {
          if (_.isArray(condition)) {
            _.each(condition,function(singleCondition){
              conditions.push(this.entitiesCondition(typeFilter,singleCondition))
            },this)
          } else {
            conditions.push(this.entitiesCondition(typeFilter,condition))              
          }                                             

        } else if(typeFilter.type === 'smart') {
          if (_.isArray(condition)) {
            _.each(condition,function(singleCondition){
              conditions.push(this.smartCondition(typeFilter,singleCondition))
            },this)
          } else {
            conditions.push(this.smartCondition(typeFilter,condition))              
          }              

        } else if(typeFilter.type === 'response') {
          conditions.push(this.responseCondition(typeFilter))  

        } else if(typeFilter.type === 'addressed') {
          conditions.push(this.addressedCondition(typeFilter))  

        } else if(typeFilter.type === 'date') {
          if (typeFilter.relation === 'after') {
            conditions.push(this.dateAfterCondition(typeFilter,condition))
          } else if (typeFilter.relation === 'before') {
            conditions.push(this.dateBeforeCondition(typeFilter,condition))
          }

        } else {         
            conditions.push(this.attributeCondition(typeFilter,condition))
        }
      } 
    },this);    
    return conditions
  },
  
  // define filter conditions
  // condition for related entities 
  entitiesCondition : function(typeFilter,condition){
    var flux = this.getFlux()
    return function(entity){
      if (typeFilter.relation === 'to') {
        return entity[typeFilter.attr].indexOf(condition) > -1
      } else if (typeFilter.relation === 'from') {
        return flux.store(typeFilter.from).filter(function(item){
          return item.id === condition && item[typeFilter.attr].indexOf(entity.id) > -1
        }).length > 0
      }
    }
  },
  // condition for smart criteria (action)
  smartCondition : function(typeFilter,condition){
    return function(entity){
      return (condition === 'true' &&  checkSMART(entity[typeFilter.attr]))          
          || (condition === 'false' && !checkSMART(entity[typeFilter.attr]))
    }
  },
  // condition for addressed criteria (recommendation)
  addressedCondition : function(typeFilter){
    var flux = this.getFlux()
    return function(entity){      
      var actions = referencing(flux, {
        entity : entity, // the recommendation
        attr : 'recommendations',
        from : 'actions'        
       })
      return (typeFilter.by === 'addressed' && actions.length > 0)
          || (typeFilter.by === 'notaddressed' && actions.length === 0)
    }
  },
  // condition for response criteria (recommendation)
  responseCondition : function(typeFilter){
    return function(entity){
      return (typeFilter.by === 'accepted' && entity[typeFilter.attr] === 'Accepted')
          || (typeFilter.by === 'rejected' && entity[typeFilter.attr] === 'Rejected')
    }
  },
  // condition for attribute
  attributeCondition : function(typeFilter,condition){
    return function(entity){      
      return entity[typeFilter.attr] === condition
    }
  },
  // date after condition
  dateAfterCondition : function(typeFilter,condition){
    return function(entity){
      var value = entity[typeFilter.attr]
      return value !== ''
          && value.format() !== 'Invalid date'
          && value.isAfter(moment(condition,'MM-YYYY',true),'month')
    }
  },
  // date before condition
  dateBeforeCondition : function(typeFilter,condition){
    return function(entity){
      var value = entity[typeFilter.attr]
      return value !== ''
          && value.format() !== 'Invalid date'
          && value.isBefore(moment(condition,'MM-YYYY',true),'month')
    }
  }

})
