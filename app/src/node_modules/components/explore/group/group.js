var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityListFactory            = require('components/list/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions','recommendations')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      loading : flux.store('groups').isLoading() 
             || flux.store("actions").isLoading()
             || flux.store("recommendations").isLoading()      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.loading) {
      return  (<Load />)
    } else {
      
       var entity = flux.stores.groups.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-group page-content">
        {this.renderMain(entity)}
        <EntityListFactory
          entity = {entity}
          store = {flux.store('actions')}
          related = {'actions'}
          items = {flux.store('actions').filter(function(item){
            return item['groups'].split(',').indexOf(entity.id) > -1
          })}
          collapsible = {false} 
          showEmpty = {true}
          showCount = {true}
          linked = {true}
        />
        <EntityListFactory
          entity = {entity}
          store = {flux.store('recommendations')}
          related = {'recommendations'}
          items = {flux.store('recommendations').filter(function(item){
            return item['groups'].split(',').indexOf(entity.id) > -1
          })}
          collapsible = {true} 
          showEmpty = {true}
          showCount = {true}
          linked = {true}
        />
      </div>     
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      <Grid className='page-section group-section-analysis'>

        <Row className="header-row">
          <Col md={12}>
            <h5 className="header-type">Group</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>
        <Row className="content-main">
          <Col md={8} xs={8}>
            {this.renderCommentary(entity)}
          </Col>
          <Col md={4} xs={4}>
           { entity.description.trim() !== '' 
            ? (
              [<h5 key={0} >About this Group</h5>,
              <div key={1}  className="marked-inner-html small custom-list-icon"
                dangerouslySetInnerHTML={{
                  __html: marked(entity.description, {sanitize: true})
                }} >
              </div>] )
             : null
           }
          </Col>
        </Row>
      </Grid>     
    )
  },
  renderCommentary : function(entity){
    if (entity.commentary.trim() !== '') {
      return ([ 
            <h5 key={0} >Commentary</h5>,
            <div key={1}  className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.commentary, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }  
  }
  
 

})
