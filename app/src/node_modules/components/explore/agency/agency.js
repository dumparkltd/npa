var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')

// bootstrap
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked          = require('marked')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('agencies').isLoading(),
      actionsLoading : flux.store("actions").isLoading(),
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.actionsLoading
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.agencies.findOne({ id: this.props.params.id })

      return (
        <div>
           {this.renderMain(entity)}
           {this.renderActions(entity)}
        </div>        
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row>
          <Col md={12}>
            <p>Responsible Agency &gt;</p>
            <h1>{entity.title}</h1>
          </Col>
        </Row>,
        <Row>
          <Col md={8}>
            <h4>About</h4>
            <div
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col md={4}>
            <h4>Website</h4>
            <div>
              {entity.link}
            </div>
          </Col>
        </Row>
      ]      
    )
  },
  renderActions : function (entity){
    var flux = this.props.flux
    
    var actions =  flux.store('actions').filter(function(item){
              return item.agencies.split(',').indexOf(entity.id) > -1
            })
    
    return ([
      <h2>Actions</h2>,
      <EntityTable
        cols = {['id','title']}            
            entities = {actions} />      
    ])
  }
  
 

})
