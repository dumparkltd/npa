var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('agencies').isLoading(),
      actionsLoading : flux.store("actions").isLoading(),
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.actionsLoading
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.agencies.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-agency page-content">
        <Grid className='page-section agency-section-analysis'>
           {this.renderMain(entity)}
        </Grid>
        <Grid className='page-section agency-section-actions'>   
           {this.renderActions(entity)}
        </Grid>      
      </div> 
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row key={0}  className="header-row">
          <Col md={12}>
            <h5 className="header-type">Government Agency</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>,
        <Row key={1}  className="content-main">
          <Col md={8} xs={8}>
            <h5>About</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col md={4} xs={4}>
            { this.renderWebsite(entity.link) } 
          </Col>
        </Row>
      ]      
    )
  },
  renderWebsite : function(link) {
    if (link.trim() !== '' && link.split('://').length > 1) {
      return ([
              <h5 key={0} >Website</h5>,
              <a  key={1} href={link} target="_blank">
                {link.split('://')[1].replace(/\/$/, "")}
              </a>
        ]
      )
    } else {
      return null
    }
  },
  renderActions : function (entity){
    var flux = this.props.flux
    
    var actions =  flux.store('actions').filter(function(item){
              return item.agencies.split(',').indexOf(entity.id) > -1
            })
    
    if (actions.length === 0){
      return (<h2>0 Actions</h2>)       
    } else {
      return ([
        <h2 key={0} >{actions.length + ((actions.length === 1) ? ' Action' : ' Actions')}</h2>,
        <EntityTable key={1} 
          collapsible={false}
          className="action-table"      
          cols = {[
            {type:'no',   title: 'Id',      attr:'id'},                        
            {type:'text', title: 'Action', attr:'title'},
            {type:'links'}
          ]}     
          entities = {actions} />      
      ])
    }
  }
  
 

})
