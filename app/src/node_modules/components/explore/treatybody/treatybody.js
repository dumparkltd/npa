var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('treatybodies').isLoading(),
      recsLoading : flux.store("recommendations").isLoading(),
      articlesLoading : flux.store("articles").isLoading(),
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.recsLoading 
    || this.state.articlesLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.treatybodies.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-treaty-body page-content">
        <Grid className='page-section treaty-body-section-analysis'>
           {this.renderMain(entity)}
        </Grid>
        <Grid className='page-section treaty-body-section-recommendations'>   
           {this.renderRecommendations(entity)}
        </Grid>
        <Grid className='page-section treaty-body-section-articles'>   
           {this.renderArticles(entity)}
        </Grid>
      </div> 

      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row className="header-row">
          <Col md={12}>
            <h5 className="header-type">Treaty Body</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>,
        <Row className="content-main">
          <Col md={8}>
            <h5>About</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.about, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col md={4}>
            { this.renderObservations(entity.concludingobservations) }            
          </Col>
        </Row>
      ]      
    )
  },
  renderObservations : function(observations) {
    if (observations.trim() !== '') {
      return ([
          <h5>Concluding Observations</h5>,
          <div className="marked-inner-html small custom-list-icon"
            dangerouslySetInnerHTML={{
              __html: marked(observations, {sanitize: true})
            }} >
          </div>
        ]
      )
    } else {
      return null
    }
  },          
  renderRecommendations : function (entity){
    var flux = this.props.flux
    
    var recs =  flux.store('recommendations').filter(function(item){
              return item.treatybodies.split(',').indexOf(entity.id) > -1
            })
    
    if (recs.length === 0 ) {
      return null
    } else {
      return ([
        <h2>Related UPR Recommendations</h2>,
        <EntityTable
          className="upr-recommendations-table"
          cols = {[
            {type:'no', title: 'No',      attr:'id'},            
            {type:'text', title: 'UPR Recommendation', attr:'title'},
            {type:'icon', title: 'Response', class: function(entity){
                return (entity.response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }
            },
            { 
                type: 'key-links',               
                key: {
                  type:'icons',
                  items: [{
                      title:'Accepted',
                      class:'icon-accepted-sm'
                    },
                    {
                      title:'Not Accepted',
                      class:'icon-rejected-sm'
                    }
                  ] 
                }             
              }          
          ]}  
          entities = {recs} />            
      ])
    }
  },
  
 renderArticles : function (entity){
    var flux = this.props.flux
    
    var articles =  flux.store('articles').filter(function(item){
      return entity.articles.split(',').indexOf(item.id) > -1
    })
    if (articles.length>0) {
      return ([
        <h2>Related Articles</h2>,
        <EntityTable
          className="articles-table" 
          linked = {false}
          cols = {[
            {type:'no', title: 'No',      attr:'id'},            
            {type:'text', title: 'Articles', attr:'title'}
          ]}
          entities = {articles} />         
      ])
    } else {
      return null
    }
    
  },
  
 

})
