var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var EntityTable            = require('components/list/EntityTable')

// bootstrap
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers

var _               = require('lodash')

var log       = require('debug')('src:components:explore-by')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'groups', 'agencies','treatybodies','recommendations','actions')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      groupsLoading: flux.store('groups').isLoading(),
      agenciesLoading: flux.store('agencies').isLoading(),
      treatybodiesLoading: flux.store('treatybodies').isLoading(),
      actionsLoading : flux.store("actions").isLoading(),
      recsLoading : flux.store("recommendations").isLoading()
      
      
    }
  },

  render: function () {
    var flux = this.props.flux
    var category = this.props.params.category
    
    var entities = []
    var actionsByEntity = []
    var recommendations = []
    var title
    
    if (!(this.state.actionsLoading || this.state.recsLoading)) {
      
      if (category === 'issues') {
        title = 'Issues'
        if (!this.state.issuesLoading) {
          entities = _.map(flux.store(category).entities(),function(entity){

            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1
            })
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1
            })       
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            })     
            return entity

          })
        }
      }
      else if (category === 'groups') {
        title = 'Population Groups'
        if (!this.state.groupsLoading) {
          // prpe entities
          entities = _.map(flux.store(category).entities(),function(entity){

            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1
            })
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1
            })            
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            })
                   
            return entity

          })
        }
      }
      else if (category === 'agencies') {
        title = 'Government Agencies'
        if (!this.state.agenciesLoading) {          
          entities = _.map(flux.store(category).entities(),function(entity){
            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.agencies.split(',').indexOf(entity.id) > -1
            })     
            entity.countRecs = 0
            entity.countRecsAccepted = 0
            return entity
          })
        }
      }
      else if (category === 'treatybodies') {
        title = 'Treaty Bodies'
        
        if (!this.state.treatybodiesLoading) {
          // prpe entities
          entities = _.map(flux.store(category).entities(),function(entity){
            entity.countActions = 0
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
//              return item.treatybodies.split(',').indexOf(entity.id) > -1
              return item.treatybodies.split(',').indexOf(entity.id) > -1
            })            
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
//              return (item.treatybodies.split(',').indexOf(entity.id) > -1 || item.treatybodies === 'all') && item.response === 'Accepted'
              return item.treatybodies.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            })
                   
            return entity

          })
        }
      } else {

      }        
      
      log('entities',entities)
    }
    return (
      <Row>
        <Col md={12}>
          <h1>{title}</h1>
          <EntityTable
            cols = {['id','title','countActions','countRecs','countRecsAccepted']}
            entities = {entities} />
        </Col>
      </Row>
   
    )
  }
  
 

})
