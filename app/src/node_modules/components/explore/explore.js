var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var EntityTable            = require('components/list/EntityTable')
var Load            = require('components/load')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers

var _               = require('lodash')

var log       = require('debug')('src:components:explore-by')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'groups', 'agencies','treatybodies','recommendations','actions')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      issuesLoading: flux.store('issues').isLoading(),
      groupsLoading: flux.store('groups').isLoading(),
      agenciesLoading: flux.store('agencies').isLoading(),
      treatybodiesLoading: flux.store('treatybodies').isLoading(),
      actionsLoading : flux.store("actions").isLoading(),
      recsLoading : flux.store("recommendations").isLoading()
      
      
    }
  },

  render: function () {
    var flux = this.props.flux
    var category = this.props.params.category
    
    var entities = []
    var cols
    var maxValue = 0
    var maxValue = 0
    var title
    var type
    var type
    
    if ((this.state.actionsLoading 
      || this.state.recsLoading)) { 
      return (
          <Load/>               
      )
    } else {

      if (category === 'issues') {
      
        if (!this.state.issuesLoading) {
          title = 'Explore by Issue'
          
          entities = _.sortBy(_.map(flux.store(category).entities(),function(entity){

            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1
            })
            maxValue = Math.max(maxValue,entity.countActions)            
            
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1
            })   
            maxValue = Math.max(maxValue,entity.countRecs)
            
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            }) 
            return entity

          }),'countActions').reverse()
                    
          cols = [
            {
              type:   'text',
              title:  'Issue',
              attr:   'title'
            },
            {
              type:       'bar',
              title:      'Government Actions',
              value : {attr:'countActions',color:'#0095AC'}, 
              maxValue : maxValue
            },
            {
              type:'ratio-bar', 
              title: 'UPR Recommendations',  
              ratio : {attr:'countRecsAccepted',color:'#E19900'}, 
              value: {attr:'countRecs',color:'#AEBCC1'},
              maxValue : maxValue
            },
            { 
              type: 'key-links',
              key: {
                type:'units',
                items: [{
                    title:'Accepted',
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    color:'#AEBCC1'
                  }
                ] 
              }             
            }

          ]        
        }  
      }
      else if (category === 'groups') {
        
        if (!this.state.groupsLoading) {
          title = 'Explore by Population Group'
          
          // prpe entities
          entities = _.sortBy(_.map(flux.store(category).entities(),function(entity){

            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1
            })
            maxValue = Math.max(maxValue,entity.countActions)            
            
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1
            })  
            maxValue = Math.max(maxValue,entity.countRecs)
            
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
              return item.groups.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            })
            return entity

          }),'countActions').reverse()
          
          cols = [
            {
              type:   'text',
              title:  'Population Group',
              attr:   'title'
            },
            {
              type:       'bar',
              title:      'Government Actions',
              value : {attr:'countActions',color:'#0095AC'}, 
              maxValue : maxValue
            },
            {
              type:'ratio-bar', 
              title: 'UPR Recommendations',  
              ratio : {attr:'countRecsAccepted',color:'#E19900'}, 
              value: {attr:'countRecs',color:'#AEBCC1'},
              maxValue : maxValue
            },
            { 
              type: 'key-links',
              key: {
                type:'units',
                items: [{
                    title:'Accepted',
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    color:'#AEBCC1'
                  }
                ] 
              }             
            }

          ]             
        }
      }
      else if (category === 'agencies') {
             
        if (!this.state.agenciesLoading) {          
          entities = _.sortBy(_.map(flux.store(category).entities(),function(entity){
            entity.countActions = flux.store('actions').countWhere(function(item){
              return item.agencies.split(',').indexOf(entity.id) > -1
            })     
            maxValue = Math.max(maxValue,entity.countActions)            
            
            entity.countRecs = 0
            entity.countRecsAccepted = 0
            return entity
          }),'countActions').reverse()
          
          title = 'Explore by Government Agency'
          cols = [
            {
              type:   'text',
              title:  'Government Agency',
              attr:   'title'
            },
            {
              type:       'bar',
              title:      'Government Actions',
              value : {attr:'countActions',color:'#0095AC'}, 
              maxValue : maxValue
            },
            {
              type:'spacer-bar'
            },            
            { 
              type: 'links'
            }

          ]             
          
        }
      }
      else if (category === 'treatybodies') {
              
        if (!this.state.treatybodiesLoading) {
          // prpe entities
          entities = _.sortBy(_.map(flux.store(category).entities(),function(entity){
            entity.countActions = 0
            entity.countRecs = flux.store('recommendations').countWhere(function(item){
              return item.treatybodies.split(',').indexOf(entity.id) > -1
            })         
            maxValue = Math.max(maxValue,entity.countRecs)
            
            entity.countRecsAccepted = flux.store('recommendations').countWhere(function(item){
              return item.treatybodies.split(',').indexOf(entity.id) > -1 && item.response === 'Accepted'
            })
            return entity

          }),'countRecs').reverse()
          title = 'Explore by UN Treaty Body'

          cols = [
            {
              type:   'text',
              title:  'UN Treaty Body',
              attr:   'title'
            },
            {
              type:'spacer-bar' 
            },
            {
              type:'ratio-bar', 
              title: 'UPR Recommendations',  
              ratio : {attr:'countRecsAccepted',color:'#E19900'}, 
              value: {attr:'countRecs',color:'#AEBCC1'},
              maxValue : maxValue
            },

            { 
              type: 'key-links',
              key: {
                type:'units',
                items: [{
                    title:'Accepted',
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    color:'#AEBCC1'
                  }
                ] 
              }             
            }
          ]             
          
        }
      }
        return (
              <div className="page-content-explore page-content">
                <Grid className='page-section explore-section-table'>
                      <h1>{title}</h1>
                      <EntityTable
                        collapsible = {false}
                        className="explore-table"
                        cols = {cols}
                        entities = {entities}
                        link = {true}
                      />
                      <div className="table-note">
                        <span className="text-uppercase strong">Note: </span>
                        Actions and recommendations may not add up to totals due to multiple possible assignments
                      </div>
                </Grid>
              </div>

            )         
    }
    
  }
   
 

})
