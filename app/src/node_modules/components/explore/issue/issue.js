var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('issues').isLoading(),
      actionsLoading : flux.store("actions").isLoading(),
      recsLoading : flux.store("recommendations").isLoading(),
      articlesLoading : flux.store("articles").isLoading(),
      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.actionsLoading
    || this.state.recsLoading 
    || this.state.articlesLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.issues.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-issue page-content">
        <Grid className='page-section issue-section-analysis'>
           {this.renderMain(entity)}
        </Grid>
        <Grid className='page-section issue-section-actions'>   
           {this.renderActions(entity)}
        </Grid>
        <Grid className='page-section issue-section-recs'>   
           {this.renderRecs(entity)}
        </Grid>
        <Grid className='page-section issue-section-articles'>   
           {this.renderArticles(entity)}
        </Grid>        
      </div>        
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row key={0} className="header-row">
          <Col md={12}>
            <h5 className="header-type">Issue</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>,
        <Row key={1} className="content-main">
          <Col md={8} xs={8}>
            {this.renderCurrentContext(entity)}
          </Col>
          <Col md={4} xs={4}>
            {this.renderOtherIssues(entity)}
          </Col>
        </Row>
      ]      
    )
  },
  renderCurrentContext : function(entity){
    if (entity.currentcontext.trim() !== '') {
      return ([ 
            <h5 key={0} >Current Context</h5>,
            <div key={1} className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.currentcontext, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  },
  renderOtherIssues : function(entity){
    if (entity.otherissuesraised.trim() !== '') {
      return ([ 
            <h5 key={0} >Other Issues Raised <br/> by Civil Society</h5>,
            <div key={1}  className="marked-inner-html small custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.otherissuesraised, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  },
  renderActions : function (entity){
    var flux = this.props.flux
    
    var actions =  flux.store('actions').filter(function(item){
              return item.issues.split(',').indexOf(entity.id) > -1
    })
    if (actions.length === 0){
      return (<h2>0 Actions</h2>)       
    } else {
      return ([
        <h2 key={0} >{actions.length + ((actions.length === 1) ? ' Action' : ' Actions')}</h2>,
        <EntityTable
          key={1} 
          collapsible={false}          
          className="action-table"      
          cols = {[
            {type:'no',   title: 'Id',      attr:'id'},                        
            {type:'text', title: 'Action', attr:'title'},
            {type:'links'}
          ]}     
          entities = {actions} />      
      ])
    }
  },
  renderRecs : function (entity){
    var flux = this.props.flux
    
    var recs =  flux.store('recommendations').filter(function(item){
      return item.issues.split(',').indexOf(entity.id) > -1
    })
    var countRecsAccepted = recs.filter(function(item) {
      return item.response === 'Accepted'
    }).length
    var countRecsRejected = recs.length - countRecsAccepted
    
    if (recs.length === 0 ) {
      return (<h2>0 Related UPR Recommendations</h2>)
    } else {
      return ([
        <h2 key={0} >{recs.length + ((recs.length === 1) ? ' Related UPR Recommendation' : ' Related UPR Recommendations')}</h2>,
        <EntityTable
          key={1} 
          showMoreLabel="related UPR Recommendations"
          className="upr-recommendations-table"
          cols = {[
            {type:'no', title: 'No.',      attr:'id'},            
            {type:'text', title: 'UPR Recommendation', attr:'title'},
            {type:'icon', title: 'Response', class: function(entity){
                return (entity.response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }
            },
            { 
              type: 'key-links',               
              key: {
                type:'no',
                items: [{
                    title:'Accepted',
                    no: countRecsAccepted,
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    no: countRecsRejected,
                    color:'#AEBCC1' 
                  }
                ] 
              }             
            }         
          ]}  
          entities = {recs} />            
      ])
    }
  },
  renderArticles : function (entity){
    var flux = this.props.flux
    
    var articles =  flux.store('articles').filter(function(item){
      return entity.articles.split(',').indexOf(item.id) > -1
    })
    if (articles.length>0) {
      return ([
        <h2 key={0}>{articles.length === 1 ? 'Related Human Rights Article' : 'Related Human Rights Articles' }</h2>,
        <EntityTable key={1}
          showMoreLabel="articles"
          className="articles-table" 
          linked = {false}
          cols = {[
            {type:'no', title: 'No.',      attr:'id'},            
            {type:'text', title: 'UDHR Article',  attr:'title'}
          ]}
          entities = {articles} />         
      ])
    } else {
      return null
    }
    
  },
 

})
