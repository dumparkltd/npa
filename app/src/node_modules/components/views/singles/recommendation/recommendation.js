// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load                = require('components/load')
var NavCategories        = require('components/nav/nav-categories')
var EntityListFactory   = require('components/table/EntityListFactory')
var CategoryListFactory = require('components/list/CategoryListFactory')
var NavBack             = require('components/nav/nav-back')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:recommendation')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','groups','treatybodies')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('recommendations').isLoading()
            || flux.store("issues").isLoading()
            || flux.store("groups").isLoading()
            || flux.store("treatybodies").isLoading()
            || flux.store("actions").isLoading()
    }
  },

  render: function () {        
    return (
      <div className="hrc-single-view hrc-single-view-recommendation"  
          aria-busy={this.state.loading ? "true" : "false"}>
        {this.renderContent()}
      </div>
    )           
  },
  renderContent: function () {
    var flux = this.getFlux() 
    
    if (this.state.loading) {
      return (<Load alt="Loading recommendation &hellip;"/>)      
    } else {  
      
      var entity = flux.stores.recommendations.findOne({ id: this.props.params.id })
      
      // get actions for rec
      // recs referenced by actions
      var actions = referencing(flux, {
        entity : entity, // the recommendation
        attr : 'recommendations',
        from : 'actions'        
       })
       
      return (
        <div role='main' className="page-content-recommendation page-content">
          {this.renderMain(entity)}
          <Grid className={'page-section page-section-actions'}>
            <EntityListFactory
              relatedType = {'actions'}
              relatedEntities = {actions}
              showEmpty = {true}
              showCount = {true}
              collapsible = {false} 
              linked = {true}
            />
          </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      <Grid role="article" className='page-section recommendation-section-analysis' >
        <Row key={0}  className="header-row">
          <Col sm={10}>
            <h2 className="header-type-large">{"Recommendation No. " + entity.id }</h2>
            <h3 className="header-title">{entity.title}</h3>
          </Col>
          <div className='nav-control'>
            <NavBack/>    
          </div>
        </Row>
        <Row key={1}  className="content-main">
          <Col sm={8} className="col-content-main">
              <div className="recommendation-attributes">
                <table>
                  <tbody>
                    <tr>
                      <td className="label-cell">
                        Recommmendation No.
                      </td>
                      <td className="content-cell">
                        {entity.id}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        UPR Session
                      </td>
                      <td className="content-cell">
                        {entity.session}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Recommending State
                      </td>
                      <td className="content-cell">
                        {entity.state}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Government Response
                      </td>
                      <td className="content-cell">
                        {entity.response}: 
                        <div className="response-text">
                          {entity.responsetext}
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
          </Col>
          <Col sm={4} className="col-content-aside">  
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('issues')}
              taxonomy = {'issues'}
            /> 
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('groups')}
              taxonomy = {'groups'}
            />
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('treatybodies')}
              taxonomy = {'treatybodies'}
            />
          </Col>
        </Row>
      </Grid>
    )
  }

})
