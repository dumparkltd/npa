var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var NavPrimary        = require('components/nav/nav-categories')
var EntityListFactory            = require('components/list/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('issues').isLoading() 
           ||  flux.store("actions").isLoading()
           ||  flux.store("recommendations").isLoading()
           ||  flux.store("articles").isLoading()      
    }
  },

   render: function () {
    var flux = this.getFlux()
    
    if (this.state.loading) {
      return (
        <div>
          <NavPrimary 
            active = 'issues'
          />
          <Load/>
        </div>
      )
    } else {
      
       var entity = flux.stores.issues.findOne({ id: this.props.params.id })

      return (
        <div>
          <NavPrimary 
            active = 'issues'
          />              
          <div className="page-content-issue page-content">
            <Grid className='page-section issue-section-analysis'>
               {this.renderMain(entity)}
            </Grid>
            <EntityListFactory
              entity = {entity}
              store = {flux.store('actions')}
              related = {'actions'}
              items = {flux.store('actions').filter(function(item){
                return item['issues'].split(',').indexOf(entity.id) > -1
              })}
              collapsible = {false} 
              showEmpty = {true}
              showCount = {true}
              linked = {true}
            />
            <EntityListFactory
              entity = {entity}
              store = {flux.store('recommendations')}
              related = {'recommendations'}
              items = {flux.store('recommendations').filter(function(item){
                return item['issues'].split(',').indexOf(entity.id) > -1
              })}
              collapsible = {true} 
              showEmpty = {true}
              showCount = {true}
              linked = {true}
            />
            <EntityListFactory
              entity = {entity}
              store = {flux.store('articles')}
              related = {'articles'}
              items =  {flux.store('articles').filter(function(item){
                return entity['articles'].split(',').indexOf(item.id) > -1
              })}
              collapsible={true} 
              showEmpty = {false}
              showCount = {false}
              linked = {false}
            />
          </div>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      [
        <Row key={0} className="header-row">
          <Col md={12}>
            <h5 className="header-type">Issue</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>,
        <Row key={1} className="content-main">
          <Col md={8} xs={8}>
            {this.renderCurrentContext(entity)}
          </Col>
          <Col md={4} xs={4}>
            {this.renderOtherIssues(entity)}
          </Col>
        </Row>
      ]      
    )
  },
  renderCurrentContext : function(entity){
    if (entity.currentcontext.trim() !== '') {
      return ([ 
            <h5 key={0} >Current Context</h5>,
            <div key={1} className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.currentcontext, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  },
  renderOtherIssues : function(entity){
    if (entity.otherissuesraised.trim() !== '') {
      return ([ 
            <h5 key={0} >Other Issues Raised <br/> by Civil Society</h5>,
            <div key={1}  className="marked-inner-html small custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.otherissuesraised, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  }
 

})
