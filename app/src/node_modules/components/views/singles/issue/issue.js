var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var NavCategories        = require('components/nav/nav-categories')
var EntityListFactory            = require('components/table/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('issues').isLoading()
           ||  flux.store("actions").isLoading()
           ||  flux.store("recommendations").isLoading()
           ||  flux.store("articles").isLoading()
    }
  },
  render: function () {
    return (
      <div className="hrc-category-view hrc-category-view-issue" 
          aria-busy={this.state.loading ? "true" : "false"}>
        <NavCategories
          active = 'issues'
        />
        {this.renderContent()}
      </div>
    )
  },
  renderContent: function () {
    var flux = this.getFlux()

    if (this.state.loading) {
      return (<Load alt="Loading issue &hellip;"/>)
    } else {
      var entity = flux.stores.issues.findOne({ id: this.props.params.id })

      // actions > issue
      var actions = referencing(flux, {
        entity : entity, // the issue
        attr : 'issues',
        from : 'actions'
      })
      // recs > issues
      var recs = referencing(flux, {
        entity : entity, // the issue
        attr : 'issues',
        from : 'recommendations'
      })
      // issues > articles
      var articles = referencing(flux, {
        entity : entity, // the issue
        attr : 'articles',
        to : 'articles'
      })

      return (
        <div role='main' className="page-content-issue page-content">
          {this.renderMain(entity)}
          <Grid className={'page-section page-section-actions'}>
            <EntityListFactory
              type = {'actions'}
              entities = { actions }
              showEmpty = {true}
              showCount = {true}
              collapsible = {false}
              linked = {true}
            />
          </Grid>
          <Grid className={'page-section page-section-recommendations'}>
            <EntityListFactory
              type = {'recommendations'}
              entities = {recs}
              showEmpty = {true}
              showCount = {true}
              collapsible = {true}
              linked = {true}
            />
          </Grid>
          <Grid className={'page-section page-section-articles'}>
            <EntityListFactory
              type = {'articles'}
              entities = { articles }
              showEmpty = {false}
              showCount = {false}
              collapsible = {true}
              linked = {false}
            />
          </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      <Grid role="article" className='page-section issue-section-analysis'>
        <Row key={0} className="header-row">
          <Col sm={12}>
            <h5 className="header-type">Issue</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>
        <Row key={1} className="content-main">
          <Col sm={8} className="col-content-main">
            {this.renderCurrentContext(entity)}
          </Col>
          <Col sm={4} className="col-content-aside">
            {this.renderOtherIssues(entity)}
          </Col>
        </Row>
        <Row className="export-pdf">
          <Col sm={12} className="col-content-main">
            <a href='#' onClick={this.exportPdf(entity.id)}>Export To Pdf</a>
          </Col>
        </Row>
      </Grid>
    )
  },
  renderCurrentContext : function(entity){
    if (entity.currentcontext.trim() !== '') {
      return ([
            <h5 key={0} >Current Context</h5>,
            <div key={1} className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.currentcontext, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  },
  renderOtherIssues : function(entity){
    if (entity.otherissuesraised.trim() !== '') {
      return ([
            <h5 key={0} >Other Issues Raised <br/> by Civil Society</h5>,
            <div key={1}  className="marked-inner-html small custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.otherissuesraised, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }
  },

  exportPdf: function (id) {
    var flux = this.getFlux()
    return function (e) {
      e.preventDefault()
      flux.actions.export(id, 'issue')
    }
  }


})
