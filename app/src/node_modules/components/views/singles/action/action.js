// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load                = require('components/load')
var EntityListFactory   = require('components/list/EntityListFactory')
var CategoryListFactory = require('components/list/CategoryListFactory')
var NavBack             = require('components/nav-back')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:action')

// display single action
module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','agencies','groups')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux() 
    return {
      loading: flux.store('actions').isLoading()
            || flux.store("issues").isLoading()
            || flux.store("agencies").isLoading()
            || flux.store("groups").isLoading()
            || flux.store("recommendations").isLoading()
    }
  },

  render: function () {
    var flux = this.getFlux() 
    
    if (this.state.loading) {
      return  (<Load />)
    } else {
      
      // get action from store
      var entity = flux.stores.actions.findOne({ id: this.props.params.id })
      
      // get recommendations for action     
      // entity references recommendations
      var items = referencing(flux, {
        entity : entity,
        attr : 'recommendations',
        to : 'recommendations'
      }) 
      
      // - action content      
      // - related recommendations
      return (
      <div className="page-content-action page-content">        
        {this.renderMain(entity)}
        <EntityListFactory
          entity = {entity}
          store = {flux.store('recommendations')}
          related = {'recommendations'}
          items = {items}
          collapsible = {true} 
          showEmpty = {true}
          showCount = {true}
          linked = {true}
        />
      </div>       
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux() 
    return (
      <Grid className='page-section action-section-analysis'>
        <Row key={0}  className="header-row">
          <Col md={10} xs={10}>
            <h2 className="header-type-large">{'Action '} &ndash; {entity.id}</h2>
            <h3 className="header-title">{entity.title}</h3>
          </Col>
          <div className='nav-control'>
            <NavBack/>    
          </div> 
        </Row>
        <Row key={1}  className="content-main">
          <Col md={8} xs={8} className="column-smart">
            {this.renderSMART(entity)}
            <h5>Description</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
            <h5>Desired Outcome</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.desiredoutcome, {sanitize: true})
              }} >
            </div>
            <h5>Measures</h5>
            <div className="marked-inner-html custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.measures, {sanitize: true})
              }} >
            </div>
            <h5>Target date</h5>
            <div className="marked-inner-html strong"
              dangerouslySetInnerHTML={{
                __html: marked(entity.targetdate, {sanitize: true})
              }} >
            </div>  
          </Col>
          <Col md={4} xs={4} className="column-categories">  
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('issues')}
              taxonomy = {'issues'}
            /> 
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('groups')}
              taxonomy = {'groups'}
            />
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('agencies')}
              taxonomy = {'agencies'}
            />    
          </Col>
        </Row>
      </Grid>
    )
  },
  
  renderSMART : function(entity) {
    return ([
      <h5  key={0} className='tt-none'>SMART criteria: Assessment coming soon</h5>,
      <a  key={1} href="#" title="About S.M.A.R.T. criteria" onClick={this.handleNavClick('smart')} className='smart-information'>
        <span className="icon-information"/>
      </a>,
      <ul  key={2} className="list-inline list-bordered" style={{width:'100%'}}>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-s"></div>
          <div className="smart-label">Specific</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-m"></div>
          <div className="smart-label">Measureable</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-a"></div>
          <div className="smart-label">Assignable</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-r"></div>
          <div className="smart-label">Result-oriented</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-t"></div>
          <div className="smart-label">Time-bound</div>
        </li>
      </ul>
    ])
    
  }, 
  
  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },
})
