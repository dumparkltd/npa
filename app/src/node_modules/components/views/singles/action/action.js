// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Icon        = require('components/icon')
var HeaderRow        = require('components/HeaderRow')
var Load                = require('components/load')
var EntityListFactory   = require('components/table/EntityListFactory')
var CategoryListFactory = require('components/list/CategoryListFactory')
var NavCategories          = require('components/nav/nav-categories')

//util
var referencing = require('utils/referencing')
var formatDate = require('utils/formatDate')
var getSMARTicon = require('utils/getSMARTicon')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:action')

// display single action
module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions', 'recommendations', 'agencies', 'groups')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading()
            || flux.store("issues").isLoading()
            || flux.store("agencies").isLoading()
            || flux.store("groups").isLoading()
            || flux.store("recommendations").isLoading()
    }
  },

  render: function () {
    return (
      <div className="hrc-single-view hrc-single-view-action" 
          aria-busy={this.state.loading ? "true" : "false"}>
        {this.renderContent()}
      </div>
    )
  },
  renderContent: function () {
    var flux = this.getFlux()

    if (this.state.loading) {
      return (<Load alt="Loading action &hellip;"/>)
    } else {
      // get action from store
      var entity = flux.stores.actions.findOne({ id: this.props.params.id })

      // get recommendations for action
      // entity references recommendations
      var recs = referencing(flux, {
        entity : entity,
        attr : 'recommendations',
        to : 'recommendations'
      })

      // - action content
      // - related recommendations
      return (
        <div role='main' className="page-content-action page-content">
          {this.renderMain(entity)}
          <Grid className={'page-section page-section-recommendations'}>
            <EntityListFactory
              type = {'recommendations'}
              entities = {recs}
              showEmpty = {true}
              showCount = {true}
              collapsible = {true}
              linked = {true}
            />
          </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    
    var targetdatecomment = formatDate(entity.targetdate) === '' && entity.targetdatecomment === '' ? 'Unspecified' : entity.targetdatecomment
    
    return (
      <Grid role="article" className='page-section action-section-analysis'>
        <HeaderRow
          supTitle = {'Government Action ' + entity.id}
          title = {entity.title}
          tools = {[
            {
              type:'print',
              label:'Download Action Report',
              args:{
                type:'action',
                id:entity.id
              }
            }
          ]}                  
        />
        <Row key={1}  className="content-main">
          <Col sm={8} className="col-content-main column-smart">
            {this.renderSMART(entity)}
            <h5>Description</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
            <h5>Desired Outcome</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.desiredoutcome, {sanitize: true})
              }} >
            </div>
            <h5>Measures</h5>
            <div className="marked-inner-html custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.measures, {sanitize: true})
              }} >
            </div>
            <h5>Target date</h5>
            <div className="target-date-date strong">
              {formatDate(entity.targetdate)}
            </div>
            <div className="target-date-comment marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(targetdatecomment, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col sm={4} className="col-content-aside column-categories">
            <CategoryListFactory
              entity = {entity}
              store = {flux.store('issues')}
              taxonomy = {'issues'}
            />
            <CategoryListFactory
              entity = {entity}
              store = {flux.store('groups')}
              taxonomy = {'groups'}
            />
            <CategoryListFactory
              entity = {entity}
              store = {flux.store('agencies')}
              taxonomy = {'agencies'}
            />
          </Col>
        </Row>
      </Grid>
    )
  },

  renderSMART : function(entity) {

    var criteria = [
      {id:'s',attr:'isspecific',value:entity.isspecific},
      {id:'m',attr:'ismeasurable',value:entity.ismeasurable},
      {id:'a',attr:'isassignable',value:entity.isassignable},
      {id:'r',attr:'isresultoriented',value:entity.isresultoriented},
      {id:'t',attr:'istimebound',value:entity.istimebound}
    ]

    return ([
      <h5  key={0} className='tt-none'>SMART criteria</h5>,
      <a  key={1} href="#" title="About SMART criteria" onClick={this.handleNavClick('smart')} className='smart-information'>
        <Icon name="info"/>
      </a>,
      <ul key={2} className="list-inline list-bordered" style={{width:'100%'}}>
        {
          _.map(criteria,function(criterion, i){
            return this.renderSMARTcriterion(criterion)
          },this)
        }
      </ul>
    ])

  },

  renderSMARTcriterion : function (criterion) {
    var className_li = "list-item-smart"
    var className_icon = getSMARTicon('class')(criterion.value,criterion.attr)
    var label = getSMARTicon('label')(criterion.value,criterion.attr)
    var labelComponent = getSMARTicon('labelcomponent')(criterion.value,criterion.attr)
    
    return ([
        <li className={className_li} style={{width:'20%'}}>
          <Icon label={label} name={className_icon}/>
          {labelComponent}
        </li>
    ])
  },


  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },

  
})
