// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var EntityListFactory = require('components/list/EntityListFactory')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:treatybody')


module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      loading : flux.store('treatybodies').isLoading() 
             || flux.store("recommendations").isLoading()
             || flux.store("articles").isLoading()
    }
  },
  
  render: function () {
    var flux = this.props.flux
    
    if (this.state.loading){
      return  (<Load />)
    } else {
      
      var entity = flux.stores.treatybodies.findOne({ id: this.props.params.id })

      // get recommendations for treatybody
      // treatybody referenced by recommendation
      var recs = referencing(flux, {
        entity : entity, // the treatybody
        attr : 'treatybodies',
        from : 'recommendations'        
       })
       
      var articles = referencing(flux, {
        entity : entity, // the treatybody
        attr : 'articles',
        to : 'articles'
      }) 
       
      return (
      <div className="page-content-treaty-body page-content">
        {this.renderMain(entity)}
        <EntityListFactory
          entity = {entity}
          store = {flux.store('recommendations')}
          related = {'recommendations'}
          items = {recs}
          collapsible = {true} 
          showEmpty = {true}
          showCount = {true}
          linked = {true}
        />
        <EntityListFactory
          entity = {entity}
          store = {flux.store('articles')}
          related = {'articles'}
          items =  {articles}
          collapsible={true} 
          showEmpty = {false}
          showCount = {false}
          linked = {false}
        />
      </div> 

      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      <Grid className='page-section treaty-body-section-analysis'>
        <Row className="header-row">
          <Col md={12}>
            <h5 className="header-type">Treaty Body</h5>
            <h1 className="header-title">{entity.title}</h1>
          </Col>
        </Row>
        <Row className="content-main">
          <Col md={8} xs={8}>
            <h5>About</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.about, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col md={4} xs={8}>
            { this.renderObservations(entity.concludingobservations) }            
          </Col>
        </Row>
      </Grid>
    )
  },
  renderObservations : function(observations) {
    if (observations.trim() !== '') {
      return ([
          <h5 key={0} >Concluding Observations</h5>,
          <div key={1} className="marked-inner-html small custom-list-icon"
            dangerouslySetInnerHTML={{
              __html: marked(observations, {sanitize: true})
            }} >
          </div>
        ]
      )
    } else {
      return null
    }
  }
 

})
