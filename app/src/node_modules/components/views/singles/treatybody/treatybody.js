// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var NavCategories        = require('components/nav/nav-categories')
var EntityListFactory = require('components/table/EntityListFactory')
var HeaderRow        = require('components/HeaderRow')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:treatybody')


module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading : flux.store('treatybodies').isLoading()
             || flux.store("recommendations").isLoading()
             || flux.store("articles").isLoading()
    }
  },

  render: function () {
    return (
      <div className="hrc-category-view hrc-category-view-treatybody"  
          aria-busy={this.state.loading ? "true" : "false"}>
        <NavCategories
          active = "treatybodies"
        />
        {this.renderContent()}
      </div>
    )
  },
  renderContent: function () {
    var flux = this.getFlux()

    if (this.state.loading) {
      return (<Load alt="Loading treaty body &hellip;"/>)
    } else {

      var entity = flux.stores.treatybodies.findOne({ id: this.props.params.id })

      // get recommendations for treatybody
      // treatybody referenced by recommendation
      var recs = referencing(flux, {
        entity : entity, // the treatybody
        attr : 'treatybodies',
        from : 'recommendations'
       })

      var articles = referencing(flux, {
        entity : entity, // the treatybody
        attr : 'articles',
        to : 'articles'
      })

      return (
        <div role='main' className="page-content-treatybody page-content">
          {this.renderMain(entity)}
          <Grid className={'page-section page-section-recommendations'}>
            <EntityListFactory
              type = {'recommendations'}
              entities = {recs}
              showEmpty = {true}
              showCount = {true}
              collapsible = {true}
              linked = {true}
            />
          </Grid>
          <Grid className={'page-section page-section-articles'}>
            <EntityListFactory
              type = {'articles'}
              entities = {articles}
              showEmpty = {false}
              showCount = {false}
              collapsible = {true}
              linked = {false}
            />
          </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      <Grid role="article" assName='page-section treaty-body-section-analysis'>
        <HeaderRow
          supTitle = {'Treaty Body'}
          title = {entity.title}
        />
        <Row className="content-main">
          <Col sm={8} className="col-content-main">
            <h5>About</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.about, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col sm={4} className="col-content-aside">
            { this.renderObservations(entity.concludingobservations) }
          </Col>
        </Row>
      </Grid>
    )
  },
  renderObservations : function(observations) {
    if (observations.trim() !== '') {
      return ([
          <h5 key={0} >Concluding Observations</h5>,
          <div key={1} className="marked-inner-html small custom-list-icon"
            dangerouslySetInnerHTML={{
              __html: marked(observations, {sanitize: true})
            }} >
          </div>
        ]
      )
    } else {
      return null
    }
  }


})
