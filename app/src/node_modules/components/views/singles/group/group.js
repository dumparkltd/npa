// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var NavCategories        = require('components/nav/nav-categories')
var EntityListFactory = require('components/table/EntityListFactory')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked      = require('utils/parse-markdown')
var log         = require('debug')('src:components:group')

// display single group
module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions','recommendations')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading : flux.store('groups').isLoading() 
             || flux.store("actions").isLoading()
             || flux.store("recommendations").isLoading()      
    }
  },
  render: function () {        
    return (
      <div className="hrc-category-view hrc-category-view-group" aria-live="polite">
        <NavPrimary 
          active = 'groups'
        />
        {this.renderContent()}
      </div>
    )           
  },
  renderContent: function () {
    var flux = this.getFlux()
    
    if (this.state.loading) {
      return (<Load/>)
    } else {
      
      var entity = flux.stores.groups.findOne({ id: this.props.params.id })
      
      // get actions for group
      // group referenced by actions
      var actions = referencing(flux, {
        entity : entity, // the group
        attr : 'groups',
        from : 'actions'        
      })
      var recs = referencing(flux, {
        entity : entity, // the group
        attr : 'groups',
        from : 'recommendations'        
      })
       
      return (
        <div role='main' className="page-content-group page-content">
          {this.renderMain(entity)}
          <Grid className={'page-section page-section-actions'}>
            <EntityListFactory
              relatedType = {'actions'}
              relatedEntities = {actions}
              showEmpty = {true}
              showCount = {true}
              collapsible = {false} 
              linked = {true}
            />
          </Grid>  
          <Grid className={'page-section page-section-recommendations'}>
            <EntityListFactory
              relatedType = {'recommendations'}
              relatedEntities = {recs}
              showEmpty = {true}
              showCount = {true}
              collapsible = {true} 
              linked = {true}
            />
          </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      <Grid role="article" className='page-section group-section-analysis'>
        <Row className="header-row">
          <Col sm={12}>
            <h5 className="header-type">Group</h5>
            <h1 className="page-title">{entity.title}</h1>
          </Col>
        </Row>
        <Row className="content-main">
          <Col sm={8} className="col-content-main">
            {this.renderCommentary(entity)}
          </Col>
          <Col sm={4} className="col-content-aside">
           { entity.description.trim() !== '' 
            ? (
              [<h5 key={0} >About this Group</h5>,
              <div key={1}  className="marked-inner-html small custom-list-icon"
                dangerouslySetInnerHTML={{
                  __html: marked(entity.description, {sanitize: true})
                }} >
              </div>] )
             : null
           }
          </Col>
        </Row>
      </Grid>     
    )
  },
  renderCommentary : function(entity){
    if (entity.commentary.trim() !== '') {
      return ([ 
            <h5 key={0} >Commentary</h5>,
            <div key={1}  className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.commentary, {sanitize: true})
              }} >
            </div>
      ])
    } else {
      return null
    }  
  }
  
 

})
