// react
var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var NavCategories        = require('components/nav/nav-categories')
var EntityListFactory = require('components/table/EntityListFactory')

//util
var referencing = require('utils/referencing')

// bootstrap
var Grid  = require('react-bootstrap/lib/Grid')
var Row   = require('react-bootstrap/lib/Row')
var Col 	= require('react-bootstrap/lib/Col')

//helpers
var _      = require('lodash')
var marked = require('utils/parse-markdown')
var log    = require('debug')('src:components:agency')

// display single agency
module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('groups', 'actions')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading : flux.store('agencies').isLoading()
             || flux.store("actions").isLoading()
    }
  },
  render: function () {
    return (
      <div className="hrc-category-view hrc-category-view-agency" aria-live="polite">
        <NavCategories
          active = 'agencies'
        />
        {this.renderContent()}
      </div>
    )
  },
  renderContent: function () {
    var flux = this.getFlux()

    if (this.state.loading) {
      return (<Load alt="Loading agency &hellip;"/>)
    } else {

      // get agency from store
      var entity = flux.stores.agencies.findOne({ id: this.props.params.id })

      // get actions for agency
      // agency referenced by actions
      var actions = referencing(flux, {
        entity : entity, // the agency
        attr : 'agencies',
        from : 'actions'
       })

      // - agency content
      // - related actions
      return (
          <div role='main' className="page-content-agency page-content">
            {this.renderMain(entity)}
            <Grid className={'page-section page-section-actions'}>
              <EntityListFactory
                type = {'actions'}
                entities = {actions}
                showEmpty = {true}
                showCount = {true}
                collapsible = {false}
                linked = {true}
              />
            </Grid>
        </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.getFlux()
    return (
      <Grid role="article" className='page-section agency-section-analysis'>
        <Row className="header-row">
          <Col sm={12}>
            <h5 className="header-type">Government Agency</h5>
            <h1 className="page-title">{entity.title}</h1>
          </Col>
        </Row>
        <Row className="content-main">
          <Col sm={8} className="col-content-main">
            <h5>About</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
          </Col>
          <Col sm={4} className="col-content-main">
            { this.renderWebsite(entity.link) }
          </Col>
        </Row>
        <Row className="export-pdf">
          <Col sm={12} className="col-content-main">
            <a href='#' onClick={this.exportPdf(entity.id)}>Export To Pdf</a>
          </Col>
        </Row>
      </Grid>
    )
  },
  renderWebsite : function(link) {
    if (link.trim() !== '' && link.split('://').length > 1) {
      return ([
              <h5 key={0} >Website</h5>,
              <a  key={1} href={link} target="_blank">
                {link.split('://')[1].replace(/\/$/, "")}
              </a>
        ]
      )
    } else {
      return null
    }
  },

  exportPdf: function (id) {
    var flux = this.getFlux()
    return function (e) {
      e.preventDefault()
      flux.actions.export(id, 'agency')
    }
  }

})
