var React             = require('react')
var Fluxxor           = require('fluxxor')
var StoreWatchMixin   = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/Load')
var Filters           = require('components/filters/Filters')

//helpers
var log         = require('debug')('src:components:recommendations')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('recommendations')
  ],
  propTypes : {
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {          
      
        filtergroups : [
          {
            rowid : 1, bydefault : true, title : '',
            groups : [
              { 
                group : 'cat', title : '', type:'multiselect', span:{sm:12},            
                filters: [
                  {by:'issue',type:'entities',attr:'issues',relation:'to',label:'Issue',placeholder:'Select Issue'},
                  {by:'group',type:'entities',attr:'groups',relation:'to',label:'Population Group',placeholder:'Select Group'},
                  {by:'treatybody',type:'entities',attr:'treatybodies',relation:'to',label:'UN Treaty Body',placeholder:'Select Treaty Body'}                    
                ]
              }
            ]
          },
          {
            rowid : 2, bydefault : false,
            groups : [                
              { 
                group : 'response', title : 'Government Response', type:'icon',
                span:{xxs:12, xs:6,sm:4,md:3},
                filters: [       
                  {by:'accepted',type:'response',attr:'response',label:'Accepted', 
                    options:[{value:'',icon:'pass'},{value:'true',icon:'pass-active'}]},
                  {by:'rejected',type:'response',attr:'response',label:'Not Accepted', 
                    options:[{value:'',icon:'fail'},{value:'true',icon:'fail-active'}]},
                ]              
              },              
              { 
                group : 'addressed', title : 'Addressed by Action(s)', type:'icon',
                span:{xxs:12, xs:6,sm:4,md:3},
                filters: [
                  {by:'addressed',type:'addressed',label:'Addressed', 
                    options:[{value:'',icon:'pass'},{value:'true',icon:'pass-active'}]},
                  {by:'notaddressed',type:'addressed',label:'Not Addressed', 
                    options:[{value:'',icon:'fail'},{value:'true',icon:'fail-active'}]},
                ]            
              }
                              
            ]
          }
        ]                
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('recommendations').isLoading()
    }
  },

  render: function () {
    log('props',this.props)

    // check if type is allowed
    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {
      return (
        <Filters 
          type='recommendations' 
          query={this.props.query} 
          filtergroups={this.state.filtergroups}
        />
      )
    }
  }
})
