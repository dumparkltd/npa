// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

// components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')
var NavBack     = require('components/nav/nav-back')
var EntityList  = require('components/list/EntityList')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

// helpers
var _      = require('lodash')
var marked = require('utils/parse-markdown')
var log    = require('debug')('src:components:page')

module.exports = React.createClass({
mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('pages')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()    
    return {
      loadingPages: flux.store('pages').isLoading(),
      loadingTerms: flux.store('terms').isLoading(),
      loadingArticles: flux.store('articles').isLoading(),
    }
  },

   render: function () {
    var flux = this.getFlux()    
    
    if (this.state.loadingPages ) {
      return  (<Load />)
    } else {
      var pageid = this.props.params.id
      var page = flux.stores.pages.findOne({ id: pageid })
      if (typeof page !== 'undefined') {
        return (
        <div className="page-wrapper">      
          <div className={"page-content page-content-"+pageid}>        
            {this.renderMain(page)}
            { (page.entities !== '') 
              ? (
                <Grid className='page-section page-section-entities'>
                  <Row>
                    <Col sm={12}>
                      {this.renderEntities(page)}
                    </Col>
                  </Row>
                </Grid>
              )
              : null }
          </div>
        </div>
        )
      } else {
        return ( <PageNotFound />)
      }
    }
  },
  renderMain : function(page) {
    return (
      <Grid className='page-section'>
        <div className='nav-control'>
          <NavBack/>    
        </div>
        <Row>
          <Col sm={9} xs={10}>
            <div className='page-title'>
              <h2>{page.title}</h2>
            </div>
            <h3 className='page-lead-header'>{page.lead}</h3>
            <div className='marked-inner-html'
              dangerouslySetInnerHTML={{
                __html: marked(page.description, {sanitize: true})
              }} >
            </div>
          </Col>
        </Row>
      </Grid> 
    )
  },
  renderEntities : function(page) {
    var flux = this.getFlux() 
    var entityList = null
    
    if (page.entities === 'terms' && !this.state.termsLoading) {
      var cols = [
        {type:'label', title: 'Term',       attr:'title'},
        {type:'text',  title: 'Definition', attr:'definition'}
      ]
      return ( 
        <EntityList
          collapsible = {false}  
          className="terms-table"  
          linked= {false}
          cols = {cols}
          entities = {flux.store(page.entities).entities()} 
          entityType = {flux.store(page.entities).getEntityType()} />             
      )
    }     
    else if (page.entities === 'articles' && !this.state.articlesLoading) {
      var cols = [
        {type:'no',   title: 'No',            attr:'id'},
        {type:'text', title: 'UDHR Article ', attr:'title', 
          nestAfter : {
            visibleXS:true,
            cols:[{type:'text', attr:'titlemaori', className:'italic'}]
          }
        },                
        {type:'text', title: '', attr:'titlemaori', className:'italic',hiddenXS:true}                
      ]
      return (
        <EntityList
          collapsible = {false}  
          className="articles-table"  
          linked= {false}
          cols = {cols}
          entities = {flux.store(page.entities).entities()} 
          entityType = {flux.store(page.entities).getEntityType()} />              
      )      
    } else { 
      return (<Load/>)
    }
  }
  
})
