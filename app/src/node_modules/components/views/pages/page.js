// react
var React           = require('react')
var Fluxxor         = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

// components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')
var NavBack     = require('components/nav/nav-back')
var EntityTableWrap  = require('components/table/EntityTableWrap')
var QAList = require('components/list/QAList')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

// helpers
var _      = require('lodash')
var marked = require('utils/parse-markdown')
var log    = require('debug')('src:components:page')

module.exports = React.createClass({
mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('pages','articles','faq')
  ],

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loadingPages: flux.store('pages').isLoading(),
      loadingArticles: flux.store('articles').isLoading(),
      loadingFaq: flux.store('faq').isLoading()
    }
  },
  render: function () {
    var flux = this.getFlux()

    if (this.state.loadingPages ) {
      return  (<Load alt="Loading page &hellip;"/>)
    } else {
      var pageid = this.props.params.id
      var page = flux.stores.pages.findOne({ id: pageid })
      if (typeof page !== 'undefined') {
        return (
          <div role="main" className={"page-content page-content-"+pageid}>
            {this.renderMain(page)}
            { (page.entities !== '')
              ? (
                <Grid className='page-section page-section-entities'>                  
                  {this.renderEntities(page)}
                </Grid>
              )
              : null }
          </div>
        )
      } else {
        return ( <PageNotFound />)
      }
    }
  },
  renderMain : function(page) {
    return (
      <Grid className='page-section'>
        <div className='nav-control'>
          <NavBack/>
        </div>
        <Row>
          <Col sm={10} xs={11} role='article'>
            <h5>{page.title}</h5>
            <p className='page-lead-header'>{page.lead}</p>
            <div className='marked-inner-html'
              dangerouslySetInnerHTML={{
                __html: marked(page.description, {sanitize: true})
              }} >
            </div>
          </Col>
        </Row>
      </Grid>
    )
  },
  renderEntities : function(page) {
    var flux = this.getFlux()

    if (page.entities === 'faq' && !this.state.loadingFaq) {
      return (
        <Row>
          <Col sm={10} xs={11}>
            <QAList entities = {flux.store('faq').entities()} />
          </Col>
        </Row>
      )
    }
    else if (page.entities === 'articles' && !this.state.loadingArticles) {
      var cols = [
        {type:'no',   title: 'No',            attr:'id'},
        {type:'text', title: 'UDHR Article ', attr:'title'}
      ]
      return (
        <Row>
          <Col sm={10} xs={11}>
            <EntityTableWrap
              collapsible = {false}
              className="articles-table"
              linked= {false}
              cols = {cols}
              rows = {flux.store(page.entities).entities()}
              entityType = {flux.store(page.entities).getEntityType()} />        
          </Col>
        </Row>
      )
    } else {
      return (<Load/>)
    }
  }

})
