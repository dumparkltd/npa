var React             = require('react')
var Fluxxor           = require('fluxxor')
var StoreWatchMixin   = Fluxxor.StoreWatchMixin

//components
var Load              = require('components/load')
var Filters           = require('components/filters/Filters')

//helpers
var log         = require('debug')('src:components:actions')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions')
  ],
  propTypes : {
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {          
      
        filtergroups : [
          {
            rowid : 1, bydefault : true, title : '',
            groups : [
              { 
                group : 'cat', title : '', type:'multiselect', span:{sm:12},            
                filters : [
                  {by:'issue',type:'entities',attr:'issues',relation:'to',label:'Issue',placeholder:'Select Issue'},
                  {by:'group',type:'entities',attr:'groups',relation:'to',label:'Population Group',placeholder:'Select Group'},
                  {by:'agency',type:'entities',attr:'agencies',relation:'to',label:'Goverment Agency',placeholder:'Select Agency'}
                ]
              }
            ]
          },
          {
            rowid : 2, bydefault : false, title : 'SMART criteria', reset:true,
            groups : [
              { 
                group : 'specific', title : 'Specific', type:'icon',
                span:{xxs:6,xs:4,sm:2},
                filters : [       
                  {by:'specific',value:'true',type:'smart',attr:'isspecific',label:'Met',
                    options:[{value:'',icon:'smart-s-pass'},{value:'true',icon:'smart-s-pass-active'}]},
                  {by:'specific',value:'false',type:'smart',attr:'isspecific',label:'Not met', 
                    options:[{value:'',icon:'smart-s-fail'},{value:'false',icon:'smart-s-fail-active'}]},
                ]   
              },             
              { 
                group : 'measurable', title : 'Measurable', type:'icon',
                span:{xxs:6,xs:4,sm:2},
                filters : [       
                  {by:'measurable',value:'true',type:'smart',attr:'ismeasurable',label:'Met',
                    options:[{value:'',icon:'smart-m-pass'},{value:'true',icon:'smart-m-pass-active'}]},
                  {by:'measurable',value:'false',type:'smart',attr:'ismeasurable',label:'Not met', 
                    options:[{value:'',icon:'smart-m-fail'},{value:'false',icon:'smart-m-fail-active'}]},
                ]   
              },             
              { 
                group : 'assignable', title : 'Assignable', type:'icon',
                span:{xxs:6,xs:4,sm:2},
                filters : [       
                  {by:'assignable',value:'true',type:'smart',attr:'isassignable',label:'Met',
                    options:[{value:'',icon:'smart-a-pass'},{value:'true',icon:'smart-a-pass-active'}]},
                  {by:'assignable',value:'false',type:'smart',attr:'isassignable',label:'Not met', 
                    options:[{value:'',icon:'smart-a-fail'},{value:'false',icon:'smart-a-fail-active'}]},
                ]   
              },             
              { 
                group : 'resultoriented', title : 'Result-oriented', type:'icon',
                span:{xxs:6,xs:4,sm:2},
                filters : [       
                  {by:'resultoriented',value:'true',type:'smart',attr:'isresultoriented',label:'Met',
                    options:[{value:'',icon:'smart-r-pass'},{value:'true',icon:'smart-r-pass-active'}]},
                  {by:'resultoriented',value:'false',type:'smart',attr:'isresultoriented',label:'Not met', 
                    options:[{value:'',icon:'smart-r-fail'},{value:'false',icon:'smart-r-fail-active'}]},
                ]   
              },             
              { 
                group : 'timebound', title : 'Timebound', type:'icon',
                span:{xxs:6,xs:4,sm:2},
                filters : [       
                  {by:'timebound',value:'true',type:'smart',attr:'istimebound',label:'Met',
                    options:[{value:'',icon:'smart-t-pass'},{value:'true',icon:'smart-t-pass-active'}]},
                  {by:'timebound',value:'false',type:'smart',attr:'istimebound',label:'Not met', 
                    options:[{value:'',icon:'smart-t-fail'},{value:'false',icon:'smart-t-fail-active'}]},
                ]   
              }             
            ]
          },
          {
            rowid:3, bydefault:false, title:'Target date',reset:true,
            groups: [
              {
                group : 'date', title : 'After', type:'dateselect', 
                 span:{sm:3},
                 filters: [
                   {by:'target-date-after',type:'date',attr:'targetdate', relation:'after',placeholder:'Enter date'}
                 ]
              },
              {
                group : 'date', title : 'Before', type:'dateselect', 
                 span:{sm:3},
                 filters: [
                   {by:'target-date-before',type:'date',attr:'targetdate', relation:'before',placeholder:'Enter date'}              
                 ]
              }
            ]
          }         
        ]       
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading()
    }
  },

  render: function () {
    log('props',this.props)

    // check if type is allowed
    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {
      return (
        <Filters 
          type='actions' 
          query={this.props.query} 
          filtergroups={this.state.filtergroups}
        />
      )
    }
  }
})
