var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')

var FiltersPanel = require('components/filters/FiltersPanel')

// TODO TEMP
var EntityListFactory = require('components/table/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')
var getColumns = require('utils/getColumns')
var checkSMART = require('utils/checkSMART')

//helpers
var _           = require('lodash')
var moment      = require('moment')
var log         = require('debug')('src:components:all')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies')
  ],
  propTypes : {
    params: React.PropTypes.object,
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {          
      filtergroups : {
        actions : [
          { group : 'cat', title : '', type:'multiselect', 
            span:{sm:12},            
            filters : [
              {by:'issue',type:'entities',attr:'issues',relation:'to',label:'Issue',placeholder:'Select Issue'},
              {by:'group',type:'entities',attr:'groups',relation:'to',label:'Population Group',placeholder:'Select Group'},
              {by:'agency',type:'entities',attr:'agencies',relation:'to',label:'Goverment Agency',placeholder:'Select Agency'}
            ]
          },
          { group : 'smart', title : 'SMART criteria', type:'icon', options:[
              {suffix:'', value:''},
              {suffix:': met', value:'true'},
              {suffix:': not met ', value:'false'}
            ], 
            span:{sm:6},
            filters : [
              {by:'specific',type:'smart',attr:'isspecific',label:'Specific', 
                icons:['smart-s','smart-s','smart-s-fail']},
              {by:'measurable',type:'smart',attr:'ismeasurable',label:'Measurable', 
                icons:['smart-m','smart-m','smart-m-fail']},
              {by:'assignable',type:'smart',attr:'isassignable',label:'Assignable', 
                icons:['smart-a','smart-a','smart-a-fail']},
              {by:'resultoriented',type:'smart',attr:'isresultoriented',label:'Result-oriented', 
                icons:['smart-r','smart-r','smart-r-fail']},
              {by:'timebound',type:'smart',attr:'istimebound',label:'Time-bound', 
                icons:['smart-t','smart-t','smart-t-fail']},
            ]
          },
          { group : 'date', title : 'Target date', type:'dateselect', 
            span:{sm:6},
            filters: [
              {by:'target-date-after',type:'date',attr:'targetdate', relation:'after',placeholder:'After'},
              {by:'target-date-before',type:'date',attr:'targetdate', relation:'before',placeholder:'Before'}              
            ]
          }
        ],
        recommendations : [
          { group : 'cat', title : '', type:'multiselect', 
            span:{sm:12},
            filters: [
              {by:'issue',type:'entities',attr:'issues',relation:'to',label:'Issue',placeholder:'Select Issue'},
              {by:'group',type:'entities',attr:'groups',relation:'to',label:'Population Group',placeholder:'Select Group'},
              {by:'treatybody',type:'entities',attr:'treatybodies',relation:'to',label:'UN Treaty Body',placeholder:'Select Treaty Body'}                    
            ]
          },
          { group : 'response', title : 'Government Response', type:'icon', options:[
              {suffix:'', value: ''},
              {suffix:'', value: 'true'}
            ], 
            span:{xs:6,sm:3},
            filters: [       
              {by:'accepted',type:'response',attr:'response',label:'Accepted', 
                icons:['pass' , 'pass']},
              {by:'rejected',type:'response',attr:'response',label:'Not Accepted', 
                icons:['fail', 'fail']}             
            ]              
          },
          { group : 'addressed', title : 'Addressed by Action(s)', type:'icon', options:[
              {suffix:'', value: ''},
              {suffix:'', value: 'true'}
            ], 
            span:{xs:6,sm:3},
            filters: [
              {by:'addressed',type:'addressed',label:'Addressed', 
                icons:['pass' , 'pass']},
              {by:'notaddressed',type:'addressed',label:'Not Addressed', 
                icons:['fail', 'fail']}
            ]            
          }
        ]
      },      
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading()
           ||  flux.store("recommendations").isLoading()
    }
  },

  render: function () {
    log('props',this.props)

    var flux = this.getFlux()

    var type = this.props.params.id
    var query = _.clone(this.props.query)

    // check if type is allowed
    if (Object.keys(this.state.filtergroups).indexOf(type) === -1)  {              
      return ( 
        <PageNotFound />
      )
    } else if (this.state.loading) {
      return (
        <Load/>
      )
    } else {

      // the filter definitions
      var typeFilters = _(this.state.filtergroups[type]).pluck('filters').flatten(true).value()
      // 'collect' conditions      
      var conditions = this.getConditions(query,typeFilters)
      
      
      // filter entities according to conditions      
      var filteredEntities = conditions.length === 0 
        ? flux.stores[type].entities()
        : flux.stores[type].filter(function(item){
          return conditions.length === 1
            ? conditions[0](item)
            : _.reduce(conditions, function(bool, condition){
              return (typeof bool === 'function' ? bool(item) : bool) && condition(item)
            })
          })
          
      // 1. Filters panel
      // 2. Filtered entity list
                
      return (
        <div role='main' >
          <section className='page-tools'>
            <FiltersPanel
              type = {type}
              query = {query}
              filtergroups = {this.state.filtergroups[type]}
              entities = {filteredEntities}
            />
          </section>
          <div role='article' className="page-content page-content-all">
            <Grid className={'page-section page-section-' + type}>
              <EntityListFactory
                entities = {filteredEntities} 
                type = {type}
                showEmpty = {true}
                showCount = {true}
                collapsible={false}  
                linked = {true}     
                captionAttribute = {(conditions.length === 0 ? '' : 'Filtered ')} 
              />
            </Grid>
          </div>
        </div>
      )
    }
  },
  getConditions : function (query,typeFilters) {
    
      
    
    var conditions = []
      
    // for each filter from query
    _.each(query,function(condition,key){
      // get filter definition from this.state[type]
      var typeFilter = _.find(typeFilters,{by:key})

      if (typeof typeFilter !== 'undefined') {

        if (typeFilter.type === 'entities') {
          if (_.isArray(condition)) {
            _.each(condition,function(singleCondition){
              conditions.push(this.entitiesCondition(typeFilter,singleCondition))
            },this)
          } else {
            conditions.push(this.entitiesCondition(typeFilter,condition))              
          }                                             

        } else if(typeFilter.type === 'smart') {
          if (_.isArray(condition)) {
            _.each(condition,function(singleCondition){
              conditions.push(this.smartCondition(typeFilter,singleCondition))
            },this)
          } else {
            conditions.push(this.smartCondition(typeFilter,condition))              
          }              

        } else if(typeFilter.type === 'response') {
          conditions.push(this.responseCondition(typeFilter))  

        } else if(typeFilter.type === 'addressed') {
          conditions.push(this.addressedCondition(typeFilter))  

        } else if(typeFilter.type === 'date') {
          if (typeFilter.relation === 'after') {
            conditions.push(this.dateAfterCondition(typeFilter,condition))
          } else if (typeFilter.relation === 'before') {
            conditions.push(this.dateBeforeCondition(typeFilter,condition))
          }

        } else {         
            conditions.push(this.attributeCondition(typeFilter,condition))
        }
      } 
    },this);    
    return conditions
  },
  
  // define filter conditions
  // condition for related entities 
  entitiesCondition : function(typeFilter,condition){
    var flux = this.getFlux()
    return function(entity){
      if (typeFilter.relation === 'to') {
        return entity[typeFilter.attr].indexOf(condition) > -1
      } else if (typeFilter.relation === 'from') {
        return flux.store(typeFilter.from).filter(function(item){
          return item.id === condition && item[typeFilter.attr].indexOf(entity.id) > -1
        }).length > 0
      }
    }
  },
  // condition for smart criteria (action)
  smartCondition : function(typeFilter,condition){
    return function(entity){
      return (condition === 'true' && checkSMART(entity[typeFilter.attr]))
          || (condition === 'false' && !checkSMART(entity[typeFilter.attr]))
    }
  },
  // condition for addressed criteria (recommendation)
  addressedCondition : function(typeFilter){
    var flux = this.getFlux()
    return function(entity){      
      var actions = referencing(flux, {
        entity : entity, // the recommendation
        attr : 'recommendations',
        from : 'actions'        
       })
      return (typeFilter.by === 'addressed' && actions.length > 0)
          || (typeFilter.by === 'notaddressed' && actions.length === 0)
    }
  },
  // condition for response criteria (recommendation)
  responseCondition : function(typeFilter){
    return function(entity){
      return (typeFilter.by === 'accepted' && entity[typeFilter.attr] === 'Accepted')
          || (typeFilter.by === 'rejected' && entity[typeFilter.attr] === 'Rejected')
    }
  },
  // condition for attribute
  attributeCondition : function(typeFilter,condition){
    return function(entity){      
      return entity[typeFilter.attr] === condition
    }
  },
  // date after condition
  dateAfterCondition : function(typeFilter,condition){
    return function(entity){
      var value = entity[typeFilter.attr]
      return value !== ''
          && value.format() !== 'Invalid date'
          && value.isAfter(moment(condition,'MM-YYYY',true),'month')
    }
  },
  // date before condition
  dateBeforeCondition : function(typeFilter,condition){
    return function(entity){
      var value = entity[typeFilter.attr]
      return value !== ''
          && value.format() !== 'Invalid date'
          && value.isBefore(moment(condition,'MM-YYYY',true),'month')
    }
  }
        



})
