var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')

// TEMP
var NavTop        = require('components/nav/nav-categories')
var EntityTableWrap            = require('components/table/EntityTableWrap')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:filter')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies')
  ],
  propTypes : {
    params: React.PropTypes.object,
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {
      targets : {
        actions : [
          {by:'issue',type:'entities',attr:'issues',relation:'to'},
          {by:'group',type:'entities',attr:'groups',relation:'to'},
          {by:'agency',type:'entities',attr:'agencies',relation:'to'},
          {by:'recommendation',type:'entities',attr:'recommendations',relation:'to'},
          {by:'from',type:'date',attr:'targetdate'},
          {by:'to',type:'date',attr:'targetdate'}
        ],
        recommendations : [
          {by:'issue',type:'entities',attr:'issues',relation:'to'},
          {by:'group',type:'entities',attr:'groups',relation:'to'},
          {by:'treatybody',type:'entities',attr:'treatybodies',relation:'to'},
          {by:'action',type:'entities',attr:'recommendations',relation:'from',from:'actions'},
          {by:'response',type:'text',attr:'response'}
        ]          
      }
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading() 
           ||  flux.store("recommendations").isLoading()
    }
  },

  render: function () {
    log('props',this.props)
     
    var flux = this.getFlux()
    
    var target = this.props.params.id
    var filters = _.clone(this.props.query)
    
    // check if target is allowed
    if (Object.keys(this.state.targets).indexOf(target) === -1)  {
              
      return ( 
        <div>
          <NavTop />
          <PageNotFound />
        </div>
      )
    } else if (this.state.loading) {
      return (
        <div>
          <NavTop 
            active = 'actions'
          />  
          <Load/>
        </div>
      )
    } else {
      
      targetFilters = this.state.targets[target]
      
      // collect conditions
      
      var conditions = []
      // for each filter from filters
      _.each(filters,function(filter,key){
        // get filter definition from this.state[target]
        var targetFilter = _.find(targetFilters,{by:key})
        
        if (targetFilter.type === 'entities') {
          if (_.isArray(filter)) {
            _.each(filter,function(filterItem){
              conditions.push(this.entitiesCondition(targetFilter,filterItem))
            })
          } else {
            conditions.push(this.entitiesCondition(targetFilter,filter))              
          }            
          
          
        } else if(targetFilter.type === 'text') {
          
        
        } else if(targetFilter.type === 'date') {
        
        
        }
      },this);
      
      
      
      
      
      var entities = flux.stores[target].filter(function(item){        
        return conditions.length === 1 
          ? conditions[0](item)
          : _.reduce(conditions, function(bool, condition){          
            return (typeof bool === 'function' ? bool(item) : bool) && condition(item)
          })
      })
      
      
      
             
      // actions > issue
      var actions = entities
      var cols = this.getActionColumns()
                
      return (
        <div role='main' >
          <NavTop />              
                
          <div role='article' className="page-content-issue page-content">
            <Grid className='page-section issue-section-analysis'>
               {this.renderMain()}
            </Grid>
            <Grid className={'page-section page-section-actions'}>
                        <EntityTableWrap
                          caption = {actions.length + ' Actions'}
                          collapsible={false}  
                          className={'actions-table'}
                          linked = {this.props.linked}
                          cols = {cols}            
                          rows = {actions} 
                          entityType = 'actions'
                        />
            </Grid>
          </div>
        </div>
      )
    }
  },
  entitiesCondition : function(targetFilter,filterItem){
    var flux = this.getFlux()
    return function(entity){      
      if (targetFilter.relation === 'to') {
        return entity[targetFilter.attr].split(',').indexOf(filterItem) > -1
      } else if (targetFilter.relation === 'from') {
        return flux.store(targetFilter.from).filter(function(item){
          return item.id === filterItem && item[targetFilter.attr].split(',').indexOf(entity.id) > -1
        }).length > 0                    
      }    
    }
  },
  renderMain : function (){
    var flux = this.getFlux()
    return (
      
        <Row key={0} className="header-row">
          <Col sm={12}>
            <h5 className="header-type">Actions</h5>
          </Col>
        </Row>
           
    )
  },
  getSMARTiconClass : function (criterion, attr) {
    var icon_class = 'icon-smart-sm-' + 
            (attr === 'isspecific' 
              ? 's'   
              : (attr === 'ismeasurable' 
                ? 'm'   
                : (attr === 'isassignable' 
                  ? 'a'   
                  : (attr === 'isresultoriented' 
                    ? 'r'   
                    : (attr === 'istimebound' 
                      ? 't' : '')))))
            
    return icon_class + (this.checkCriterion(criterion) ? ' active' : '')
  },
  getSMARTiconLabel : function (criterion, attr) {
    var icon_label =  
            (attr === 'isspecific' 
              ? 'Specific'   
              : (attr === 'ismeasurable' 
                ? 'Measurable'   
                : (attr === 'isassignable' 
                  ? 'Assignable'   
                  : (attr === 'isresultoriented' 
                    ? 'Result oriented'   
                    : (attr === 'istimebound' 
                      ? 'Timebound' : '')))))
            
    return icon_label + (this.checkCriterion(criterion) ? ': satisfied' : ': not satisfied')
  },  
  checkCriterion : function(field) {
    return field === 1 || field === '1' || field === 'y' || field === 'yes'
  },    
  getActionColumns : function () {
    var _this = this    
    
    // SMART columns
    var col_s = {type : 'icon', hiddenXS : true, title : 'S', attr : 'isspecific', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_m = {type : 'icon', hiddenXS : true, title : 'M', attr : 'ismeasurable', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_a = {type : 'icon', hiddenXS : true, title : 'A', attr : 'isassignable', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_r = {type : 'icon', hiddenXS : true, title : 'R', attr : 'isresultoriented', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_t = {type : 'icon', hiddenXS : true, title : 'T', attr : 'istimebound', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}                
    
    // ID column
    var col_id = {type:'no',   title: 'Id', attr:'id'}
    
    // title column with nested table
    var col_title = {
      type:'text', 
      title: 'Action', 
      attr:'title',      
      nestAfter : {
        visibleXS : true,
        cols : [ 
          _.extend({},col_s,{hiddenXS:false}),              
          _.extend({},col_m,{hiddenXS:false}),              
          _.extend({},col_a,{hiddenXS:false}),              
          _.extend({},col_r,{hiddenXS:false}),              
          _.extend({},col_t,{hiddenXS:false})
        ]              
      }
    }
   
    var col_links = { 
      type: 'link-links',
      link : {
        title : 'About SMART criteria',
        hiddenTitle : true,
        icon : 'icon-information',
        onClick : this.handleNavClick('smart')
      }
      
      
    }
        
    return [ col_id, col_title, col_s, col_m, col_a, col_r, col_t, col_links ]
  },  
  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },

 

})
