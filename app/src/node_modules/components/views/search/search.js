var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')

var FiltersPanel = require('components/filters/FiltersPanel')

// TODO TEMP
var EntityTableWrap            = require('components/table/EntityTableWrap')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')
var getColumns = require('utils/getColumns')
var checkSMART = require('utils/checkSMART')

//helpers
var _           = require('lodash')
var moment      = require('moment')
var log         = require('debug')('src:components:all')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies')
  ],
  propTypes : {
    params: React.PropTypes.object,
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {
      types : {
               
      }
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading() 
           ||  flux.store("recommendations").isLoading()
    }
  },

  render: function () {
    log('props',this.props)
     
    var flux = this.getFlux()
    
    var query = _.clone(this.props.query)
    

              
    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {
      
       
      
//      // filter entities according to conditions      
//      var filtered = conditions.length === 0 
//        ? flux.stores[type].entities()
//        : flux.stores[type].filter(function(item){        
//          return conditions.length === 1 
//            ? conditions[0](item)
//            : _.reduce(conditions, function(bool, condition){          
//              return (typeof bool === 'function' ? bool(item) : bool) && condition(item)
//            })
//          })
//          

                
      return (
        <div role='main' >
          
          <div role='article' className="page-content-issue page-content">
            <Grid className='page-section issue-section-analysis'>
               {this.renderMain()}
            </Grid>
          </div>
        </div>
      )
    }
  },
   
  renderMain : function (){
    var flux = this.getFlux()
    return (
      
        <Row key={0} className="header-row">
          <Col sm={12}>
          SEARCH
          </Col>
        </Row> 
           
    )
  },
  
      


 

})
