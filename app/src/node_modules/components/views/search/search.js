var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')
var FiltersPanel = require('components/filters/FiltersPanel')

var EntityListFactory = require('components/table/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')
var getColumns = require('utils/getColumns')
var checkSMART = require('utils/checkSMART')

//helpers
var _           = require('lodash')
var moment      = require('moment')
var log         = require('debug')('src:components:all')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies','articles','terms','pages')
  ],
  propTypes : {
    params: React.PropTypes.object,
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {
      types : [
        {
          type : 'actions',
          fields:['id','title','description','desiredoutcome','strategy','measures']
        },
        { 
          type : 'recommendations',
          fields:['id','title','state','response','responsetext']
        },                
        { 
          type : 'issues',
          fields:['title','currentcontext','otherissuesraised']
        },
        { 
          type : 'groups',
          fields:['title','commentary','description']
        },
        { 
          type : 'agencies',
          fields:['title','description']
        },
        { 
          type : 'treatybodies',
          fields:['title','about','concludingobservations']
        },
        { 
          type : 'articles',
          fields:['id','title','titlemaori'],
          clickHandler: this.handlePageLink('articles')
        },
        { 
          type : 'terms',
          fields:['title','definition'],
          clickHandler: this.handlePageLink('terms')          
        },
        { 
          type : 'pages',
          fields:['title','lead','description']
        }
      ]
    }
  },
  handlePageLink :  function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },
  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading() 
           ||  flux.store("recommendations").isLoading()
           ||  flux.store("issues").isLoading()
           ||  flux.store("groups").isLoading()
           ||  flux.store("agencies").isLoading()
           ||  flux.store("treatybodies").isLoading()
           ||  flux.store("terms").isLoading()
           ||  flux.store("articles").isLoading()
           ||  flux.store("pages").isLoading()
    }
  },

  render: function () {
    log('props',this.props)
     
    var flux = this.getFlux()
    
    var query = _.clone(this.props.query)
    
    // check loading
    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {
      // check type
      if (typeof query.type === 'undefined') {
        this.getFlux().actions.query('type',this.state.types[0].type)
        return (<div/>)      
        
      } else {
        //defaults
        var str  = typeof query.str  !== 'undefined' ? query.str  : ''
        // check str
        if (str.length === 0 ){
          return (
            <div role='main' >
              {this.renderSearchField('')}
               <div role='article' className="page-content-issue page-content">
                <Grid>
                  <Row>
                    <Col sm={12}>           
                      Please enter your search terms above
                    </Col>
                  </Row>         
                </Grid>
              </div>
            </div>
          )
        } else {


          //figure out search types
  //        var types = typeof query.type !== 'undefined' 
  //          ? _.filter(this.state.types,function(type){return type.type === type})
  //          : this.state.types
          var types = this.state.types 

          var pattern = new RegExp(str, "gi")

          _.each(types,function(type){

            type.matches = flux.stores[type.type].filter(function(item){            
              return _.find(type.fields,function(field){                          
                if (field === 'id') {
                  return item[field] === str
                } else {
                  return str.length > 2 ? pattern.test(item[field]) : false
                }

              })            
            })                 

          })
          
          var activeType = _.find(types,function(type){
            return type.type === query.type
          })          

          return (
            <div role='main' >
              {this.renderSearchField(str)}
              <div role='article' className="page-content-issue page-content">
                <Grid className='page-section issue-section-analysis'>
                  <Row>
                    <Col sm={3}>
                      <ul className='list-unstyled'>
                        {
                          _.map(types,function(type){
                            var length = type.matches.length
                            if (length > 0) {
                              return (
                                <li>
                                  <a href="#" role='button' 
                                    className={"btn" + (type.type === activeType.type ? ' active' : '')} 
                                    onClick={this.handleTypeClick(type.type)}>
                                    {type.type + ' (' + type.matches.length + ')'}
                                  </a>
                                </li>
                              )
                            } else {
                              return null
                            }
                          },this)
                        }
                      </ul>
                    </Col>
                    <Col sm={9}>
                      <ul>
                        <EntityListFactory
                          relatedType = {activeType.type}
                          relatedEntities = {activeType.matches}
                          showEmpty = {true}
                          showCount = {true}
                          collapsible = {false} 
                          linked = {true}
                          detailed = {false}
                        />
                      </ul>
                    </Col>
                  </Row>
                </Grid>
              </div>
            </div>
          )     
        } 
      }
    }
  },
   
  renderSearchField : function (str){
    var flux = this.getFlux()
    return (
      <Grid>
        <Row>
          <Col sm={12}>
            <input type="text" value={str} onChange={this.handleInputChange}/>
          </Col>
        </Row> 
      </Grid>
    )
  },
  handleInputChange : function(event) {
    this.getFlux().actions.query('str',event.target.value)
  },
  handleTypeClick : function(type) {
    return function (e) {
      e.preventDefault()
      this.getFlux().actions.query('type',type)
    }.bind(this)
  }
   


 

})
