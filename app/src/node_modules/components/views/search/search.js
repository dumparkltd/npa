var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var PageNotFound= require('components/page-not-found')
var FiltersPanel = require('components/filters/FiltersPanel')

var EntityListFactory = require('components/table/EntityListFactory')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//util
var referencing = require('utils/referencing')
var getColumns = require('utils/getColumns')
var checkSMART = require('utils/checkSMART')

//helpers
var _           = require('lodash')
var moment      = require('moment')
var log         = require('debug')('src:components:search')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('actions','recommendations','issues','groups','agencies','treatybodies','articles','terms','pages')
  ],
  propTypes : {
    params: React.PropTypes.object,
    query: React.PropTypes.object
  },
  getInitialState : function(){
    return {
      types : [
        {
          type : 'actions',
          fields:['id','title','description','desiredoutcome','strategy','measures']          
        },
        { 
          type : 'recommendations',
          fields:['id','title','state','response','responsetext']
        },                
        { 
          type : 'issues',
          fields:['title','currentcontext','otherissuesraised']
        },
        { 
          type : 'groups',
          fields:['title','commentary','description']
        },
        { 
          type : 'agencies',
          fields:['title','description']
        },
        { 
          type : 'treatybodies',
          fields:['title','about','concludingobservations']
        },
        { 
          type : 'pages',
          exludes:['intro'],
          fields:['title','lead','description'],
          nestedTypes : [
            { 
              type : 'articles',
              fields:['id','title','titlemaori']
            },
            { 
              type : 'terms',
              fields:['title','definition']
            },
          ]
        }
      ]
    }
  },

  getStateFromFlux: function () {
    var flux = this.getFlux()
    return {
      loading: flux.store('actions').isLoading() 
           ||  flux.store("recommendations").isLoading()
           ||  flux.store("issues").isLoading()
           ||  flux.store("groups").isLoading()
           ||  flux.store("agencies").isLoading()
           ||  flux.store("treatybodies").isLoading()
           ||  flux.store("terms").isLoading()
           ||  flux.store("articles").isLoading()
           ||  flux.store("pages").isLoading()
    }
  },

  render: function () {
    log('props',this.props)
     
    var flux = this.getFlux()
    
    var query = _.clone(this.props.query)
    
    // check loading
    if (this.state.loading) {
      return (
        <Load/>
      )
    } else {
      
      //defaults
      var str  = typeof query.str  !== 'undefined' ? query.str  : ''
      // check str
      if (str.length === 0 ){
        return (
          <div role='main' >
            {this.renderSearchField('')}
             <div role='article' className="page-content-issue page-content">
              <Grid>
                <Row>
                  <Col sm={12}>           
                    Please enter your search terms above
                  </Col>
                </Row>         
              </Grid>
            </div>
          </div>
        )
      } else {


        //figure out search types
//        var types = typeof query.type !== 'undefined' 
//          ? _.filter(this.state.types,function(type){return type.type === type})
//          : this.state.types
        var types = this.state.types 

        var pattern = new RegExp(str, "i")

        _.each(types,function(type){
          // consider checking for type match, eg when searched for "action" return all actions


          type.matches = flux.stores[type.type].filter(function(item){    
            if (typeof type.exludes !== 'undefined' && type.exludes.indexOf(item.id) > -1){
              return false
            } else {
              // until first field matches
              var matchField = _.find(type.fields,function(field){                          
                if (field === 'id') {
                  return item[field] === str
                } else {
                  if (str.length > 2) {
                    var target = item[field]
                            .replace(/[āĀ]/, "a")
                            .replace(/[ēĒ]/, "e")
                            .replace(/[īĪ]/, "i")
                            .replace(/[ōŌ]/, "o")
                            .replace(/[ūŪ]/, "u")
                    return pattern.test(target)
                  } else {
                    return false
                  }
                }                
              })
              if (typeof type.nestedTypes !== 'undefined') {
                var matchNested = false
                _.each(type.nestedTypes,function(t){

                  t.matches = flux.stores[t.type].filter(function(item){    
                    // until first field matches
                    var matchField = _.find(t.fields,function(field){                          
                      if (field === 'id') {
                        return item[field] === str
                      } else {
                        if (str.length > 2) {
                          var target = item[field]
                                  .replace(/[āĀ]/, "a")
                                  .replace(/[ēĒ]/, "e")
                                  .replace(/[īĪ]/, "i")
                                  .replace(/[ōŌ]/, "o")
                                  .replace(/[ūŪ]/, "u")
                          return pattern.test(target)
                        } else {
                          return false
                        }
                      }                
                    })
                    return typeof matchField !== 'undefined'

                  })
                  matchNested = typeof t.matches !== 'undefined' && t.matches.length > 0
                })
              }
              return typeof matchField !== 'undefined' || matchNested    
            }
          })                 

        })                    
        
        var activeType
        if (typeof query.type !== 'undefined') {
          activeType = _.find(types,function(type){          
            return type.type === query.type
          })
        } else {
          // default to first matching type
          activeType = _.find(types,function(type){
            return type.matches.length > 0
          })     
          // or even to 
          if (typeof activeType === 'undefined') {
            activeType = types[0]
          }
        }
        
         
        
        return (
          <div role='main' >
            {this.renderSearchField(str)}
            <div role='article' className="page-content-issue page-content">
              <Grid className='page-section issue-section-analysis'>
                <Row>
                  <Col sm={3}>
                    <ul className='list-unstyled'>
                      {
                        _.map(types,function(type){
                          if (type.matches.length > 0 || type.type === query.type) {
                            return (
                              <li>
                                <a href="#" role='button' 
                                  className={"btn" + (type.type === activeType.type ? ' active' : '')} 
                                  onClick={this.handleTypeClick(type.type)}>
                                  {type.type + ' (' + type.matches.length + ')'}
                                </a>
                              </li>
                            )
                          } else {
                            return null
                          }
                        },this)
                      }
                    </ul>
                  </Col>
                  <Col sm={9}>
                    <ul>
                      <EntityListFactory
                        type = {activeType.type}
                        entities = {activeType.matches}
                        showEmpty = {true}
                        showCount = {true}
                        collapsible = {false} 
                        linked = {true}
                        detailed = {false}
                        captionAttribute = {'Found '}
                        handleRowClick = {
                          typeof activeType.clickHandler !== 'undefined'
                          ? activeType.clickHandler
                          : undefined
                        }
                      />
                    </ul>
                  </Col>
                </Row>
              </Grid>
            </div>
          </div>
        )     
      } 
      
    }
  },
   
  renderSearchField : function (str){
    var flux = this.getFlux()
    return (
      <Grid>
        <Row>
          <Col sm={12}>
            <input 
              type="text" 
              value={str} 
              placeholder="Search..."
              onChange={this.handleInputChange}
            />
          </Col>
        </Row> 
      </Grid>
    )
  },
  handlePageLink :  function (page) {
    var flux = this.getFlux()

    return function (e) {
      // 13 = Return, 32 = Space      
      if (typeof e.which === 'undefined' || e.which === 13 || e.which === 32) {
        e.preventDefault()
        flux.actions.navPage(page)
      }
    }
  },
  handleInputChange : function(e) {
    this.getFlux().actions.query('str',e.target.value)
  },
  handleTypeClick : function(type) {
    return function (e) {
      e.preventDefault()
      this.getFlux().actions.query('type',type)
    }.bind(this)
  }
   


 

})
