//react
var React   = require('react')
var Fluxxor = require('fluxxor')

// components
var NestedTable       = require('components/list/NestedTable')
var TableCellText		  = require('components/list/TableCellText')
var TableCellIcon		  = require('components/list/TableCellIcon')
var TableCellBar		  = require('components/list/TableCellBar')

//helpers
var _      = require('lodash')
var log    = require('debug')('src:components:entityListRow')



var TableLinkRow = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React)
  ],
  propTypes : {
    row: React.PropTypes.object,    
    cols: React.PropTypes.array,
    linked:React.PropTypes.bool    
  },
  
  render: function () {    
    log('props',this.props)
    
    var row = this.props.row
    
    var linked = typeof this.props.linked !== 'undefined' ? this.props.linked : true

    var className = (linked) ? 'hrc-tr hrc-table-row hrc-table-link-row': 'hrc-tr hrc-table-row'
    return (
            
        <div className={className} 
             onClick={(linked) ? this.handleRowClick(row.id,row.type) : false} >
          {
            _.map(this.props.cols,function(col,i){            
            var classes = 'hrc-td hrc-cell hrc-cell-' + col.type
                    + (col.hiddenXS ? ' hidden-xs' : '')               
                    + (col.visibleXS ? ' visible-xs' : '')               
              return (
                <div key={i} className={classes}>
                  {this.renderCell(col)}
                </div>
              )
            },this)
          }
        </div>
           
    )
  },
  renderCell:function(col) {
    var row = this.props.row    
    if ( col.type === 'no' || col.type === 'label') {
      return row[col.attr]    
    } else if ( col.type === 'text') {
      return ( 
              <TableCellText 
                text={row[col.attr]}
                nestBefore={this.getNestBefore(row,col)}
                nestAfter={this.getNestAfter(row,col)}
              />
      )
    } else if ( col.type === 'icon') {
      return (
              <TableCellIcon
                col={col}
                row={row} />                
            )
    } else if ( col.type === 'bar' ) {      
      return (
              <TableCellBar
                col={col}
                row={row} />                
            )          
    } else if ( col.type === 'links' 
            || col.type === 'key-links'  ) {
      return (
        <span className="icon-arrow-link"></span>
      )
    } else {
      return null
    }
  },
  
  getNestBefore : function(row,col){

    var config = col.nestBefore 
    
    if (typeof col.nestBefore === 'undefined') {
      return null
    } else {
    
      var classes = 'nest-before' 
              + (config.visibleXS ? ' visible-xs' : '')
              + (config.hiddenXS ? ' hidden-xs' : '')

      return (
        <NestedTable 
          className = {classes} 
          row = {row}
          cols = {config.cols}
        />
      )
    }
  },
  getNestAfter : function(row,col){
    
    var config = col.nestAfter 
    if (typeof col.nestAfter === 'undefined') {
      return null
    } else {
      
      var classes = 'nest-after' 
              + (config.visibleXS ? ' visible-xs' : '')
              + (config.hiddenXS ? ' hidden-xs' : '')

      return (
        <NestedTable 
          className = {classes} 
          row = {row}
          cols = {config.cols}
        />
      )
    }
  },
  handleRowClick: function (id,type) {

    return function (e) {
      e.preventDefault()
      log('handleRowclick',type + '/' + id )
      this.getFlux().actions.entity.select(type,id)
    }.bind(this)
  },  
})


module.exports = TableLinkRow;