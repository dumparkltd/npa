//main
var React     = require('react')
var Fluxxor     = require('fluxxor')

var TableCellIcon		= require('components/list/TableCellIcon')
var TableCellBar		= require('components/list/TableCellBar')
var TableCellRatioBar		= require('components/list/TableCellRatioBar')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:entityListRow')



var TableLinkRow = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React)
  ],
  propTypes : {
    entity: React.PropTypes.object,    
    cols: React.PropTypes.array,
    linked:React.PropTypes.boolean    
  },
  
  render: function () {    
    log('props',this.props)
    
    var entity = this.props.entity
    
    var linked = typeof this.props.linked !== 'undefined' ? this.props.linked : true

    var className = (linked) ? 'hrc-table-link-row': 'hrc-table-row'
    return (
            
        <tr className={className} onClick={(linked) ? this.handleRowClick(entity.id,entity.type) : false} >
          {
            _.map(this.props.cols,function(col){
              return (
                <td className={'hrc-cell hrc-cell-'+col.type}>{this.renderCell(entity,col)}</td>
              )
            },this)
          }
        </tr>
           
    )
  },
  renderCell:function(entity,col) {
    if ( col.type === 'text' || col.type === 'no' || col.type === 'label') {
      return entity[col.attr]
    } else if ( col.type === 'icon') {
      return (
              <TableCellIcon
                col={col}
                entity={entity} />                
            )
    } else if ( col.type === 'bar' ) {      
      return (
              <TableCellBar
                col={col}
                entity={entity} />                
            )
      
    } else if ( col.type === 'ratio-bar' ) {
      
      return (
              <TableCellRatioBar
                col={col}
                entity={entity} />                
            ) 
      
    } else if ( col.type === 'links' 
            || col.type === 'key-links'  ) {
      return (
        <span className="icon-arrow-link"></span>
      )
    } else {
      return null
    }
  },
  
  
  handleRowClick: function (id,type) {

    return function (e) {
      e.preventDefault()
      log('handlerowclick',type + '/' + id )
      this.getFlux().actions.entity.select(this.props.entity.type,id)
    }.bind(this)
  },  
})


module.exports = TableLinkRow;