//main
var React     = require('react')
var React       = require('react')
var Fluxxor     = require('fluxxor')

// bootstrap


//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:entityListRow')



var TableLinkRow = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React)
  ],
  propTypes : {
    entity: React.PropTypes.object,    
    cols: React.PropTypes.array    
  },
  
  render: function () {    
    log('props',this.props)
    
    var entity = this.props.entity
    return (
            
        <tr className={'hrc-table-link-row'} onClick={this.handleRowClick(entity.id,entity.type)} >
          {
            _.map(this.props.cols,function(col){
              return (
                <td className={'hrc-cell hrc-cell-'+col.type}>{this.renderCell(entity,col)}</td>
              )
            },this)
          }
        </tr>
           
    )
  },
  renderCell:function(entity,col) {
    if ( col.type === 'text' ) {
      return entity[col.attr]
    } else if ( col.type === 'bar' ) {
      
      return this.renderCellBar(entity,col)        
      
    } else if ( col.type === 'ratio-bar' ) {
      
      return this.renderCellRatioBar(entity,col)        
      
    } else if ( col.type === 'links' 
            || col.type === 'key-links'  ) {
      return (
        <span>Link</span>
      )
    } else {
      return null
    }
  },
  
  renderCellBar : function(entity,col){
    return (
      <div className='cell-bar-wrap'>
        <span className="bar-label" 
          style={{color:col.value.color}}>
                  {entity[col.value.attr]}
        </span>
        <span className="bar">
          <div className="bar-value" 
            style={{
                width:(entity[col.value.attr]/col.maxValue*100).toString() + '%',
              backgroundColor:col.value.color
              }}/>
        </span>
      </div>
    )
  },
  renderCellRatioBar : function(entity,col){
    return (
      <div className='cell-bar-wrap cell-ratio-bar-wrap'>
        <span className="bar-label" 
          style={{color:col.ratio.color}}>
                  {entity[col.ratio.attr]}
        </span>
        <span className="bar">
          <div className="bar-value bar-value-total" 
            style={{
                width:(entity[col.value.attr]/col.maxValue*100).toString() + '%',
              backgroundColor:col.value.color
              }}/>          
          <div className="bar-value  bar-value-ratio" 
            style={{
                width:(entity[col.ratio.attr]/col.maxValue*100).toString() + '%',
              backgroundColor:col.ratio.color
              }}/>
          
        </span>
      </div>
    )
  },
  
  handleRowClick: function (id,type) {

    return function (e) {
      e.preventDefault()
      log('handlerowclick',type + '/' + id )
      this.getFlux().actions.entity.select(this.props.entity.type,id)
    }.bind(this)
  },  
})


module.exports = TableLinkRow;