var React       = require('react')

var Grid 				= require('react-bootstrap/lib/Grid')


var EntityTable = require('components/list/EntityTable')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:EntityListFactory')



var EntityListFactory = React.createClass({
  propTypes : {
    entity: React.PropTypes.object,
    store : React.PropTypes.object,
    related: React.PropTypes.string,
    items : React.PropTypes.array,
    showEmpty : React.PropTypes.bool,
    showCount: React.PropTypes.bool,
    collapsible : React.PropTypes.bool, 
    linked : React.PropTypes.bool
  },
  
  render: function () {    
    log('props',this.props)
    
    var store = this.props.store
    var entity = this.props.entity
    var items = this.props.items
    var related = this.props.related
    
    var cols
    
    if (related === 'articles'){
      cols = [
        {type:'no', title: 'No.',      attr:'id'},            
        {type:'text', title: 'UDHR Article',  attr:'title'}
      ]
    } else if(related === 'actions') {
      cols = [
        {type:'no',   title: 'Id',      attr:'id'},                        
        {type:'text', title: 'Action', attr:'title'},
        {type:'links'}
      ]        
    } else if(related === 'recommendations') {
      var countRecsAccepted = items.filter(function(item) {
        return item.response === 'Accepted'
      }).length
      var countRecsRejected = items.length - countRecsAccepted      
      cols = [
            {type:'no', title: 'No.',      attr:'id'},            
            {type:'text', title: 'UPR Recommendation', attr:'title'},
            {type:'icon', title: 'Response', class: function(entity){
                return (entity.response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }
            },
            { 
              type: 'key-links',               
              key: {
                type:'no',
                items: [{
                    title:'Accepted',
                    no: countRecsAccepted,
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    no: countRecsRejected,
                    color:'#AEBCC1' 
                  }
                ] 
              }             
            }         
          ]
    }
    
      
            
            
    if (items.length === 0){
      if (!this.props.showEmpty) {
        return null       
      } else {
        return (<Grid className={'page-section page-section-'+related}>   
          <h2>{
            (this.props.showCount 
              ? items.length + ' ' 
              : '') 
            + 'Related ' + store.getTitle(items.length)}
          </h2>
        </Grid>)
      }
    } else {        
      return (
        <Grid className={'page-section page-section-'+related}>   
          <h2>{
            (this.props.showCount 
              ? items.length + ' ' 
              : '') 
            + 'Related ' + store.getTitle(items.length)}
          </h2>
          <EntityTable
            showMoreLabel={related}
            collapsible={this.props.collapsible}  
            className={related + '-table'}
            linked = {this.props.linked}
            cols = {cols}            
            entities = {items} 
            entityType = {store.getEntityType()}
          />
        </Grid>
      )
    }
      
  }   
})

module.exports = EntityListFactory;
