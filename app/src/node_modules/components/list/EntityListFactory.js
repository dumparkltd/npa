var React       = require('react')
var Fluxxor     = require('fluxxor')

// components
var EntityTable = require('components/list/EntityTable')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:EntityListFactory')



var EntityListFactory = React.createClass({
  
  mixins: [
    Fluxxor.FluxMixin(React)  
  ],
  
  propTypes : {
    relatedType: React.PropTypes.string,
    relatedEntities : React.PropTypes.array,
    showEmpty : React.PropTypes.bool,
    showCount: React.PropTypes.bool,
    collapsible : React.PropTypes.bool, 
    linked : React.PropTypes.bool
  },
  
  render: function () {    
    log('props',this.props)
    
    var relatedEntities  = this.props.relatedEntities
    var relatedType = this.props.relatedType
    var store = this.getFlux().store(relatedType)
    
    var cols = this.getColumns(relatedType)
    
    if (relatedEntities.length === 0){
      if (!this.props.showEmpty) {
        return null       
      } else {
        return (   
          <h2>{
            (this.props.showCount 
              ? relatedEntities.length + ' ' 
              : '') 
            + 'Related ' + store.getTitle(relatedEntities.length)}
          </h2>
        )
      }
    } else { 
      var caption = (<h2>
            {(this.props.showCount 
              ? relatedEntities.length + ' ' 
              : '') 
            + 'Related ' + store.getTitle(relatedEntities.length)}
          </h2>)
      return (<div>
          
          <EntityTable
            caption = {caption}
            showMoreLabel={relatedType}
            collapsible={this.props.collapsible}  
            className={relatedType + '-table'}
            linked = {this.props.linked}
            cols = {cols}            
            rows = {relatedEntities} 
            entityType = {relatedType}
          />
      </div>)
    }
      
  },
  
  getArticleColumns : function () {
    return [
        {type:'no', title: 'No.', attr:'id'},            
        {type:'text', title: 'UDHR Article',  attr:'title',
          nestAfter : {
            visibleXS:true,
            cols:[{type:'text', attr:'titlemaori', className:'italic'}]
          }
        },
        {type:'text', title: '', attr:'titlemaori', className:'italic',hiddenXS:true}                
      ]
  },
  checkCriterion : function(field) {
    return field === 1 || field === '1' || field === 'y' || field === 'yes'
  },  
  getSMARTiconClass : function (criterion, attr) {
    var icon_class = 'icon-smart-sm-' + 
            (attr === 'isspecific' 
              ? 's'   
              : (attr === 'ismeasurable' 
                ? 'm'   
                : (attr === 'isassignable' 
                  ? 'a'   
                  : (attr === 'isresultoriented' 
                    ? 'r'   
                    : (attr === 'istimebound' 
                      ? 't' : '')))))
            
    return icon_class + (this.checkCriterion(criterion) ? ' active' : '')
  },
  getSMARTiconLabel : function (criterion, attr) {
    var icon_label =  
            (attr === 'isspecific' 
              ? 'Specific'   
              : (attr === 'ismeasurable' 
                ? 'Measurable'   
                : (attr === 'isassignable' 
                  ? 'Assignable'   
                  : (attr === 'isresultoriented' 
                    ? 'Result oriented'   
                    : (attr === 'istimebound' 
                      ? 'Timebound' : '')))))
            
    return icon_label + (this.checkCriterion(criterion) ? ': satisfied' : ': not satisfied')
  },
  
  getActionColumns : function () {
    var _this = this    
    
    // SMART columns
    var col_s = {type : 'icon', hiddenXS : true, title : 'S', attr : 'isspecific', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_m = {type : 'icon', hiddenXS : true, title : 'M', attr : 'ismeasurable', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_a = {type : 'icon', hiddenXS : true, title : 'A', attr : 'isassignable', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_r = {type : 'icon', hiddenXS : true, title : 'R', attr : 'isresultoriented', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}
    var col_t = {type : 'icon', hiddenXS : true, title : 'T', attr : 'istimebound', 
      class : this.getSMARTiconClass,
      label : this.getSMARTiconLabel}                
    
    // ID column
    var col_id = {type:'no',   title: 'Id', attr:'id'}
    
    // title column with nested table
    var col_title = {
      type:'text', 
      title: 'Action', 
      attr:'title',      
      nestAfter : {
        visibleXS : true,
        cols : [ 
          _.extend({},col_s,{hiddenXS:false}),              
          _.extend({},col_m,{hiddenXS:false}),              
          _.extend({},col_a,{hiddenXS:false}),              
          _.extend({},col_r,{hiddenXS:false}),              
          _.extend({},col_t,{hiddenXS:false})
        ]              
      }
    }
    
//    var col_smart_XS = {
//      title : 'S M A R T',
//      type : 'bar',
//      digits : true,
//      visibleXS : true,
//      values : [{attr:'isspecific'},{attr:'ismeasurable'},{attr:'isassignable'},{attr:'isresultoriented'},{attr:'istimebound'}],
//      colors : {active:'#3C515E',inactive:'#AEC4CD'},
//      active : this.checkCriterion
//    }
    
    // link/key column
//    var col_links = { 
//      type: 'key-links',
//      key: {
//        type:'units',
//        items: [{
//            title:'Satisfied',
//            color:'#3C515E'
//          },
//          {
//            title:'Not satisfied',
//            color:'#AEC4CD'
//          }
//        ] ,
//        link : {
//          title : 'About',
//          icon : 'icon-information',
//          onClick : this.handleNavClick('smart')
//        }
//      }
//      
//    }
    var col_links = { 
      type: 'link-links',
      link : {
        title : 'About SMART criteria',
        hiddenTitle : true,
        icon : 'icon-information',
        onClick : this.handleNavClick('smart')
      }
      
      
    }
        
    return [ col_id, col_title, col_s, col_m, col_a, col_r, col_t, col_links ]
  },
  
  getRecommendationColumns : function () {
    var recs = this.props.relatedEntities
    
    var countRecsAccepted = recs.filter(function(entity) {
      return entity.response === 'Accepted'
    }).length
    
    var countRecsRejected = recs.length - countRecsAccepted        
    
    return [
            {type:'no', title: 'No.', attr:'id'},            
            {type:'text', title: 'Recommendation', attr:'title'},
            {type:'icon', title: 'Response', attr:'response', 
              class: function(response){
                // function will be evaluated in cell
                return (response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }, 
              label: function(response){
                // function will be evaluated in cell
                return (response === 'Accepted') ? 'Accepted' : 'Not Accepted'  
              },
              key: {
                type:'no',
                hiddenXS : true,
                items: [{
                    title:'Accepted',
                    no: countRecsAccepted,
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    no: countRecsRejected,
                    color:'#AEBCC1' 
                  }
                ] 
              }
            },
            {type:'links'}
          ]
  },
  
  getColumns : function(relatedType) {

    // articles columns
    if (relatedType === 'articles'){
      return this.getArticleColumns()
    } 
    
    // actions columns
    else if(relatedType === 'actions') {
      return this.getActionColumns()      
    }
    
    // recommendation columns
    else if(relatedType === 'recommendations') {
      return this.getRecommendationColumns()      
    } 
            
  },
  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },
})

module.exports = EntityListFactory;
