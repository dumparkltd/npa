//main
var React     = require('react')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:entityListCellBar')



var TableCellBar = React.createClass({

  propTypes : {
    row: React.PropTypes.object,    
    col: React.PropTypes.object
  },
  
  render: function () {    
//    log('props',this.props)
    
    var row = this.props.row
    var col = this.props.col
    
    
    if (col.stacked) {
      var ariaLabel = row[col.values[0].attr] + ' ' + col.values[0].title + ' ' + col.title 
              + ', ' + row[col.values[1].attr] + ' ' + col.values[1].title + ' ' + col.title  
      return (
        <div role="img" aria-label={ariaLabel} className='cell-bar-wrap cell-stacked-bar-wrap'>
          <span className="bar-label" 
            style={{color:col.values[0].color}}>
            {row[col.values[0].attr]}
          </span>
          {this.renderStackedBar(
            [
              {
                value : row[col.values[0].attr], 
                color : col.values[0].color
              },
              {
                value : row[col.values[1].attr], 
                color : col.values[1].color
              }
            ]
          )}          
        </div> 
      )
//    } 
//    else if (col.digits) {
//      return (
//        <div className='cell-bar-wrap cell-digits-bar-wrap'>
//          {this.renderDigitsBar(col.values, col.colors)}
//        </div> 
//      )
//      
    } else {
      var ariaLabel = row[col.value.attr] + ' ' + col.title
      return (
        <div role="img" aria-label={ariaLabel} className='cell-bar-wrap'>
          <span className="bar-label" style={{color:col.value.color}}>
            {row[col.value.attr]}
          </span>
          {this.renderBar(row[col.value.attr],col.value.color)}
        </div>
      )
    }
  },
  renderBar : function(value, color) {
    return (
      <span className="bar">
        {this.renderValues(value, color)}
      </span>
    )      
  },
//  renderDigitsBar : function(values,colors) {
//    return (
//      <span className="bar">
//        {this.renderDigits(values,colors)}
//      </span>
//    )
//  },
  renderStackedBar : function(objects) {
    return (
      <span className="bar">
        {this.renderValues(objects[0].value, objects[0].color)}
        {this.renderValues(objects[1].value, objects[1].color)}
        <span className="bar-label bar-label-value-total" 
          style={{ color:objects[1].color  }}>
          {objects[1].value}
        </span>
      </span>
    )      
  },
//  renderDigits : function(values, colors){
//    var col = this.props.col
//    var row = this.props.row
//    
//    var unitWidth = (100 / values.length) + '%'
//    return _.map(values, function(value,i){
//        var color = col.active(row[value.attr]) ? colors.active : colors.inactive
//        return (
//          <span key={i} className="bar-unit" style={{backgroundColor:color,width:unitWidth}}/>
//        )   
//    })    
//  },
  renderValues : function(value, color) {
    var col = this.props.col
        
    if (col.units) {
      var unitWidth = (100 / col.maxValue) + '%'
      return _.map(_.fill(Array(value), 1),function(unit,i){
        return (
          <span key={i} className="bar-unit" style={{backgroundColor:color,width:unitWidth}}/>
        )    
      })
    } else {
      var width = (100 / col.maxValue * value) + '%'
      return (
        <span className="bar-value" style={{backgroundColor:color,width:width}}/>
      )
                  
    }
  }
})


module.exports = TableCellBar;