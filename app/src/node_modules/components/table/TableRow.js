//react
var React   = require('react')
var Fluxxor = require('fluxxor')

// components
var NestedTable       = require('components/table/NestedTable')
var TableCellText		  = require('components/table/TableCellText')
var TableCellIcon		  = require('components/table/TableCellIcon')
var TableCellBar		  = require('components/table/TableCellBar')

//helpers
var _      = require('lodash')
var log    = require('debug')('src:components:entityListRow')



var TableRow = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React)
  ],
  propTypes : {
    row: React.PropTypes.object,  
    cols: React.PropTypes.array,
    linked:React.PropTypes.bool    
  },
  
  render: function () {    
    log('props',this.props)
    
    var row = this.props.row
    
    var linked = typeof this.props.linked !== 'undefined' ? this.props.linked : true
    
    if (linked) {
      return (
        <a
          href="#"
          role='button'
          tabIndex="0"
          className='hrc-tr hrc-table-row hrc-table-link-row'
          title={row.title}
          onClick={this.handleRowClick(row.id,row.type)} 
          onKeyDown={this.handleKeyDown(row.id,row.type)}
          >
          {
            _.map(this.props.cols,function(col,i){            
            var classes = 'hrc-td hrc-cell hrc-cell-' + col.type
                    + (col.hiddenXS ? ' hidden-xs' : '')               
                    + (col.visibleXS ? ' visible-xs' : '')               
              return (
                <div key={i} className={classes}>
                  {this.renderCell(col)}
                </div>
              )
            },this)
          }
        </a>
      )      
    } else {
      return (
        <div className='hrc-tr hrc-table-row' >
          {
            _.map(this.props.cols,function(col,i){            
            var classes = 'hrc-td hrc-cell hrc-cell-' + col.type
                    + (col.hiddenXS ? ' hidden-xs' : '')               
                    + (col.visibleXS ? ' visible-xs' : '')               
              return (
                <div key={i} className={classes}>
                  {this.renderCell(col)}
                </div>
              )
            },this)
          }
        </div>
      )      
    }   
    
  },
  renderCell:function(col) {
    var row = this.props.row    
    if ( col.type === 'no' || col.type === 'label') {
      return row[col.attr]    
    } else if ( col.type === 'text') {
      return ( 
              <TableCellText 
                text={row[col.attr]}
                className = {col.className}
                nestBefore={this.getNestBefore(row,col)}
                nestAfter={this.getNestAfter(row,col)}
              />
      )
    } else if ( col.type === 'icon') {
      return (
              <TableCellIcon
                col={col}
                row={row} />                
            )
    } else if ( col.type === 'bar' ) {      
      return (
              <TableCellBar
                col={col}
                row={row} />                
            )          
    } else if ( col.type === 'links' 
            || col.type === 'link-links'  
            || col.type === 'key-links'  ) {
      return (
        <span className="icon-arrow-link"></span>
      )
    } else {
      return null
    }
  },
  
  getNestBefore : function(row,col){

    var config = col.nestBefore 
    
    if (typeof col.nestBefore === 'undefined') {
      return null
    } else {
    
      var classes = 'nest-before' 
              + (config.visibleXS ? ' visible-xs' : '')
              + (config.hiddenXS ? ' hidden-xs' : '')

      return (
        <NestedTable 
          className = {classes} 
          row = {row}
          cols = {config.cols}
        />
      )
    }
  },
  getNestAfter : function(row,col){
    
    var config = col.nestAfter 
    if (typeof col.nestAfter === 'undefined') {
      return null
    } else {
      
      var classes = 'nest-after' 
              + (config.visibleXS ? ' visible-xs' : '')
              + (config.hiddenXS ? ' hidden-xs' : '')

      return (
        <NestedTable 
          className = {classes} 
          row = {row}
          cols = {config.cols}
        />
      )
    }
  },
  handleRowClick: function (id,type) {

    return function (e) {
      e.preventDefault()
      log('handleRowclick',type + '/' + id )
      this.getFlux().actions.entity.select(type,id)
    }.bind(this)
  },  
  handleKeyDown: function (id,type) {
        
    return function (e) {      
      
      var code = e.which;
      // 13 = Return, 32 = Space
      if ((code === 13) || (code === 32)) {
        e.preventDefault()
        log('handleKeyDown',type + '/' + id )
        this.getFlux().actions.entity.select(type,id)
      }
    }.bind(this)
  },  
})


module.exports = TableRow;