var React       = require('react')
var Fluxxor     = require('fluxxor')

// components
var EntityTableWrap = require('components/table/EntityTableWrap')

//util
var getColumns = require('utils/get-columns')


//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:EntityListFactory')



var EntityListFactory = React.createClass({
  
  mixins: [
    Fluxxor.FluxMixin(React)  
  ],
  
  propTypes : {
    type: React.PropTypes.string,
    entities : React.PropTypes.array,
    showEmpty : React.PropTypes.bool,
    showCount: React.PropTypes.bool,
    collapsible : React.PropTypes.bool, 
    maxItems:React.PropTypes.number,
    linked : React.PropTypes.bool,
    detailed : React.PropTypes.bool,
    captionAttribute : React.PropTypes.string,
    captionPrefix : React.PropTypes.string,
    handleRowClick : React.PropTypes.func
  },
  
  render: function () {    
//    log('props',this.props)
    var flux = this.getFlux()
    var entities  = this.props.entities
    var type = this.props.type
    var store = flux.store(type)
    var captionAttribute = typeof this.props.captionAttribute !== 'undefined' 
      ? this.props.captionAttribute 
      : this.props.showCount 
        ? 'related '
        : 'Related '
    
    if (entities.length === 0 && !this.props.showEmpty) {
        return null 
    } else {
      var caption = (
        <span>
          {
            typeof this.props.captionPrefix !== 'undefined'
              ? (<span className='table-caption-prefix'>{this.props.captionPrefix}</span>)
              : null
          }
          {
            this.props.showCount 
              ? (<span className='table-caption-highlight'>{entities.length + ' '}</span>)
              : null     
          }       
          {captionAttribute + store.getTitle(entities.length)}          
        </span>
      ) 
    
      if (entities.length === 0){
        if (!this.props.showEmpty) {
          return null       
        } else {
          return (   
            <h2>{caption}</h2>
          )
        }
      } else { 
      
            
        return (<div>

            <EntityTableWrap
              caption = {caption}
              showMoreLabel={type}
              collapsible={this.props.collapsible}  
              maxItems={this.props.maxItems}
              className={type + '-table'}
              linked = {this.props.linked}
              cols = {getColumns(type,flux,entities,this.props.detailed)}            
              rows = {entities} 
              entityType = {type}
              handleRowClick = {this.props.handleRowClick}
            />

        </div>)
      }
    }
  },
       
})

module.exports = EntityListFactory;
