var React       = require('react')
var Fluxxor     = require('fluxxor')

// components
var EntityTableWrap = require('components/table/EntityTableWrap')

//helpers
var _           = require('lodash')
var log         = require('debug')('src:components:EntityListFactory')



var EntityListFactory = React.createClass({
  
  mixins: [
    Fluxxor.FluxMixin(React)  
  ],
  
  propTypes : {
    relatedType: React.PropTypes.string,
    relatedEntities : React.PropTypes.array,
    showEmpty : React.PropTypes.bool,
    showCount: React.PropTypes.bool,
    collapsible : React.PropTypes.bool, 
    linked : React.PropTypes.bool
  },
  
  render: function () {    
    log('props',this.props)
    
    var relatedEntities  = this.props.relatedEntities
    var relatedType = this.props.relatedType
    var store = this.getFlux().store(relatedType)
    
    var cols = this.getColumns(relatedType)
    
    if (relatedEntities.length === 0){
      if (!this.props.showEmpty) {
        return null       
      } else {
        return (   
          <h2>{
            (this.props.showCount 
              ? relatedEntities.length + ' ' 
              : '') 
            + 'Related ' + store.getTitle(relatedEntities.length)}
          </h2>
        )
      }
    } else { 
      var caption = 
            (this.props.showCount ? relatedEntities.length + ' ' : '') 
          + 'Related ' + store.getTitle(relatedEntities.length)
      return (<div>
          
          <EntityTableWrap
            caption = {caption}
            showMoreLabel={relatedType}
            collapsible={this.props.collapsible}  
            className={relatedType + '-table'}
            linked = {this.props.linked}
            cols = {cols}            
            rows = {relatedEntities} 
            entityType = {relatedType}
          />
          
      </div>)
    }
      
  },
  
  getArticleColumns : function () {
    return [
        {type:'no', title: 'No.', attr:'id'},            
        {type:'text', title: 'UDHR Article',  attr:'title'}                
      ]
  },
  
  getActionColumns : function () {
    var _this = this    
                 
    
    // ID column
    var col_id = {type:'no',   title: 'Id', attr:'id'}
    
    // title column with nested table
    var col_title = {
      type:'text', 
      title: 'Action', 
      attr:'title'     
    }
   
    var col_links = { type: 'links' }
        
    return [ col_id, col_title, col_links ]
  },
  
  getRecommendationColumns : function () {
    var recs = this.props.relatedEntities
    
    var countRecsAccepted = recs.filter(function(entity) {
      return entity.response === 'Accepted'
    }).length
    
    var countRecsRejected = recs.length - countRecsAccepted        
    
    return [
            {type:'no', title: 'No.', attr:'id'},            
            {type:'text', title: 'Recommendation', attr:'title'},
            {type:'icon', title: 'Response', attr:'response', 
              class: function(response){
                // function will be evaluated in cell
                return (response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }, 
              label: function(response){
                // function will be evaluated in cell
                return (response === 'Accepted') ? 'Response: Accepted' : 'Response: Not Accepted'  
              },
              key: {
                type:'no',
                hiddenXS : true,
                items: [{
                    title:'Accepted',
                    no: countRecsAccepted,
                    color:'#E19900'
                  },
                  {
                    title:'Not Accepted',
                    no: countRecsRejected,
                    color:'#AEBCC1' 
                  }
                ] 
              }
            },
            {type:'links'}
          ]
  },
  
  getColumns : function(relatedType) {

    // articles columns
    if (relatedType === 'articles'){
      return this.getArticleColumns()
    } 
    
    // actions columns
    else if(relatedType === 'actions') {
      return this.getActionColumns()      
    }
    
    // recommendation columns
    else if(relatedType === 'recommendations') {
      return this.getRecommendationColumns()      
    } 
            
  },
  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },
})

module.exports = EntityListFactory;
