var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')
var CategoryList            = require('components/list/CategoryList')

var NavBack            = require('components/nav-back')


// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','groups','treatybodies')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('recommendations').isLoading(),     
      issuesLoading : flux.store("issues").isLoading(),
      groupsLoading : flux.store("groups").isLoading(),
      treatybodiesLoading : flux.store("treatybodies").isLoading(),
      actionsLoading : flux.store("actions").isLoading()
      
      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.issuesLoading
    || this.state.treatybodiesLoading
    || this.state.groupsLoading 
    || this.state.actionsLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.recommendations.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-recommendation page-content">
        <Grid className='page-section recommendation-section-analysis'>
           {this.renderMain(entity)}
        </Grid>
        <Grid className='page-section recommendation-section-actions'>   
           {this.renderActions(entity)}
        </Grid>        
      </div>  
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row key={0}  className="header-row">
          <Col md={10} xs={10}>
            <h2 className="header-type-large">{"Recommendation No. " + entity.id }</h2>
            <h3 className="header-title">{entity.title}</h3>             
          </Col>
          <div className='nav-control'>
            <NavBack/>    
          </div>     
        </Row>,
        <Row key={1}  className="content-main">
          <Col md={8} xs={8}>
              <div className="recommendation-attributes">
                <table>
                  <tbody>
                    <tr>
                      <td className="label-cell">
                        Recommmendation No.
                      </td>
                      <td className="content-cell">
                        {entity.id}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        UPR Session
                      </td>
                      <td className="content-cell">
                        {entity.session}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Recommending State
                      </td>
                      <td className="content-cell">
                        {entity.state}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Government Response
                      </td>
                      <td className="content-cell">
                        {entity.response}: 
                        <div className="response-text">
                          {entity.responsetext}
                        </div>                
                      </td>
                    </tr>            
                  </tbody>
                </table>

              </div>
          </Col>
          <Col md={4} xs={4}>  
            <div className='category-list-aside'>
              {this.renderIssues(entity)}
            </div>
            <div className='category-list-aside'>
              {this.renderGroups(entity)}
            </div>
            <div className='category-list-aside'>
              {this.renderTreatybodies(entity)}
            </div>
          </Col>
        </Row>
      ]      
    )
  },
  
  renderActions : function (entity){
    var flux = this.props.flux
    
    var actions =  flux.store('actions').filter(function(item){
      return item.recommendations.split(',').indexOf(entity.id) > -1
    })
    if (actions.length === 0){
      return null       
    } else {
      return ([
        <h2 key={0} >{actions.length + ((actions.length === 1) ? ' Action' : ' Actions')}</h2>,
        <EntityTable key={1} 
          className="action-table"
          collapsible={false}
          showMoreLabel="actions"          
          cols = {[
            {type:'no',   title: 'No',      attr:'id'},                        
            {type:'text', title: 'Action', attr:'title'},
            {type:'links'}
          ]}     
          entities = {actions} />      
      ])
    }
  },
  renderIssues : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('issues').filter(function(item){
      return entity.issues.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {    
      return ([
        <h6 key={0} >{items.length === 1 ? "Issue" : "Issues" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
  renderGroups : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('groups').filter(function(item){
      return entity.groups.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {        
      return ([
        <h6 key={0} >{items.length === 1 ? "Population Group" : "Population Groups" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
  renderTreatybodies : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('treatybodies').filter(function(item){
      return entity.treatybodies.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {        
      return ([
        <h6 key={0} >{items.length === 1 ? "UN Treaty Body" : "UN Treaty Bodies" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
 

})
