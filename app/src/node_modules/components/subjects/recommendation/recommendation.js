var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')
var CategoryList            = require('components/list/CategoryList')

// bootstrap
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked          = require('marked')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','articles')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('recommendations').isLoading(),     
      issuesLoading : flux.store("issues").isLoading(),
      groupsLoading : flux.store("groups").isLoading(),
      treatybodiesLoading : flux.store("treatybodies").isLoading(),
      actionsLoading : flux.store("actions").isLoading()
      
      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.issuesLoading
    || this.state.treatybodiesLoading
    || this.state.groupsLoading 
    || this.state.actionsLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.recommendations.findOne({ id: this.props.params.id })

      return (
        <div>
           {this.renderMain(entity)}
           {this.renderActions(entity)}
        </div>        
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row>
          <Col md={12}>
            <h2>Recommendation</h2>
            <h1>{entity.title}</h1>
          </Col>
        </Row>,
        <Row>
          <Col md={8}>
            <Row>
              <Col md={6}>
                <p>Recommmendation No. {entity.id}</p>
                <p>UPR Session {entity.session}</p>
                <p>Response {entity.response}</p>
                <p>Recommending State {entity.state}</p>
              </Col>
            </Row>
          </Col>
          <Col md={4}>  
            {this.renderIssues(entity)}
            {this.renderGroups(entity)}
            {this.renderTreatybodies(entity)}
            
          </Col>
        </Row>
      ]      
    )
  },
  
  renderActions : function (entity){
    var flux = this.props.flux
    
    var recs =  flux.store('actions').filter(function(item){
      return item.recommendations.split(',').indexOf(entity.id) > -1
    })
    return ([
      <h2>Related Actions</h2>,
      <EntityTable
        cols = {[
          {title: 'ID',      field:'id'},
          {title: 'Actions', field:'title'}          
        ]}            
        entities = {recs} />            
      
    ])
  },
  renderIssues : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('issues').filter(function(item){
      return entity.issues.split(',').indexOf(item.id) > -1
    })
    return ([
      <h5>Issues</h5>,
      <CategoryList
        entities = {items} />
    ])
  },
  renderGroups : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('groups').filter(function(item){
      return entity.groups.split(',').indexOf(item.id) > -1
    })
    return ([
      <h5>Population Groups</h5>,
      <CategoryList
        entities = {items} />
    ])
  },
  renderTreatybodies : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('treatybodies').filter(function(item){
      return entity.treatybodies.split(',').indexOf(item.id) > -1
    })
    return ([
      <h5>Treaty Bodies</h5>,
      <CategoryList
        entities = {items} />
    ])
  },
 

})
