var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityListFactory            = require('components/list/EntityListFactory')
var CategoryListFactory            = require('components/list/CategoryListFactory')
var NavBack            = require('components/nav-back')


// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','groups','treatybodies')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('recommendations').isLoading(),     
      issuesLoading : flux.store("issues").isLoading(),
      groupsLoading : flux.store("groups").isLoading(),
      treatybodiesLoading : flux.store("treatybodies").isLoading(),
      actionsLoading : flux.store("actions").isLoading()
      
      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.issuesLoading
    || this.state.treatybodiesLoading
    || this.state.groupsLoading 
    || this.state.actionsLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.recommendations.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-recommendation page-content">
        {this.renderMain(entity)}
        <EntityListFactory
          entity = {entity}
          store = {flux.store('actions')}
          related = {'actions'}
          items = {flux.store('actions').filter(function(item){
            return item['recommendations'].split(',').indexOf(entity.id) > -1
          })}
          collapsible = {false} 
          showEmpty = {true}
          showCount = {true}
          linked = {true}
        />
      </div>
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      <Grid className='page-section recommendation-section-analysis'>
        <Row key={0}  className="header-row">
          <Col md={10} xs={10}>
            <h2 className="header-type-large">{"Recommendation No. " + entity.id }</h2>
            <h3 className="header-title">{entity.title}</h3>
          </Col>
          <div className='nav-control'>
            <NavBack/>    
          </div>
        </Row>
        <Row key={1}  className="content-main">
          <Col md={8} xs={8}>
              <div className="recommendation-attributes">
                <table>
                  <tbody>
                    <tr>
                      <td className="label-cell">
                        Recommmendation No.
                      </td>
                      <td className="content-cell">
                        {entity.id}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        UPR Session
                      </td>
                      <td className="content-cell">
                        {entity.session}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Recommending State
                      </td>
                      <td className="content-cell">
                        {entity.state}
                      </td>
                    </tr>
                    <tr>
                      <td className="label-cell">
                        Government Response
                      </td>
                      <td className="content-cell">
                        {entity.response}: 
                        <div className="response-text">
                          {entity.responsetext}
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
          </Col>
          <Col md={4} xs={4}>  
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('issues')}
              taxonomy = {'issues'}
            /> 
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('groups')}
              taxonomy = {'groups'}
            />
            <CategoryListFactory 
              entity = {entity}
              store = {flux.store('treatybodies')}
              taxonomy = {'treatybodies'}
            />
          </Col>
        </Row>
      </Grid>
    )
  }

})
