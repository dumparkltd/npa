var React       = require('react')
var Fluxxor     = require('fluxxor')
var StoreWatchMixin = Fluxxor.StoreWatchMixin

//components
var Load        = require('components/load')
var EntityTable            = require('components/list/EntityTable')
var CategoryList            = require('components/list/CategoryList')

var NavBack            = require('components/nav-back')

// bootstrap
var Grid 				= require('react-bootstrap/lib/Grid')
var Row 				= require('react-bootstrap/lib/Row')
var Col 				= require('react-bootstrap/lib/Col')

//helpers
var _           = require('lodash')
var marked               = require('utils/parse-markdown')

var log         = require('debug')('src:components:explore:issue')

module.exports = React.createClass({
  mixins: [
    Fluxxor.FluxMixin(React),
    StoreWatchMixin('issues', 'actions','recommendations','agencies','groups')
  ],

  getStateFromFlux: function () {
    var flux = this.props.flux
    return {
      entitiesLoading: flux.store('actions').isLoading(),     
      issuesLoading : flux.store("issues").isLoading(),
      agenciesLoading : flux.store("agencies").isLoading(),
      groupsLoading : flux.store("groups").isLoading(),
      recsLoading : flux.store("recommendations").isLoading()
      
      
    }
  },

   render: function () {
    var flux = this.props.flux
    
    if (this.state.entitiesLoading 
    || this.state.issuesLoading
    || this.state.groupsLoading
    || this.state.recsLoading 
    || this.state.agenciesLoading 
    ) {
      return  (
        <Load />
      )
    } else {
      
       var entity = flux.stores.actions.findOne({ id: this.props.params.id })

      return (
      <div className="page-content-action page-content">
        <Grid className='page-section actio-section-analysis'>
           {this.renderMain(entity)}
        </Grid>
        <Grid className='page-section action-section-recs'>   
           {this.renderRecs(entity)}
        </Grid>     
      </div>       
      )
    }
  },
  renderMain : function (entity){
    var flux = this.props.flux
    return (
      [
        <Row key={0}  className="header-row">
          <Col md={10} xs={10}>
            <h2 className="header-type-large">{'Action '} &ndash; {entity.id}</h2>
            <h3 className="header-title">{entity.title}</h3>
          </Col>
          <div className='nav-control'>
            <NavBack/>    
          </div> 
        </Row>,
        <Row key={1}  className="content-main">
          <Col md={8} xs={8} className="column-smart">
            {this.renderSMART(entity)}
            <h5>Description</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.description, {sanitize: true})
              }} >
            </div>
            <h5>Desired Outcome</h5>
            <div className="marked-inner-html"
              dangerouslySetInnerHTML={{
                __html: marked(entity.desiredoutcome, {sanitize: true})
              }} >
            </div>
            <h5>Measures</h5>
            <div className="marked-inner-html custom-list-icon"
              dangerouslySetInnerHTML={{
                __html: marked(entity.measures, {sanitize: true})
              }} >
            </div>
            <h5>Target date</h5>
            <div className="marked-inner-html strong"
              dangerouslySetInnerHTML={{
                __html: marked(entity.targetdate, {sanitize: true})
              }} >
            </div>  
          </Col>
          <Col md={4} xs={4} className="column-categories">  
            <div className='category-list-aside'>
              {this.renderIssues(entity)}
            </div>
            <div className='category-list-aside'>
              {this.renderGroups(entity)}
            </div>
            <div className='category-list-aside'>
              {this.renderAgencies(entity)}            
            </div>
          </Col>
        </Row>
      ]      
    )
  },
  
  renderSMART : function(entity) {
    return ([
      <h5  key={0} className='tt-none'>SMART criteria: Assessment coming soon</h5>,
      <a  key={1} href="#" title="About S.M.A.R.T. criteria" onClick={this.handleNavClick('smart')} className='smart-information'>
        <span className="icon-information"/>
      </a>,
      <ul  key={2} className="list-inline list-bordered" style={{width:'100%'}}>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-s"></div>
          <div className="smart-label">Specific</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-m"></div>
          <div className="smart-label">Measureable</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-a"></div>
          <div className="smart-label">Assignable</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-r"></div>
          <div className="smart-label">Result-oriented</div>
        </li>
        <li className="list-item-smart" style={{width:'20%'}}>
          <div className="icon-smart-t"></div>
          <div className="smart-label">Time-bound</div>
        </li>
      </ul>
    ])
    
  },
  renderIssues : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('issues').filter(function(item){
      return entity.issues.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {      
      return ([
        <h6 key={0} >{items.length === 1 ? "Issue" : "Issues" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
  renderGroups : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('groups').filter(function(item){
      return entity.groups.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {      
      return ([
        <h6 key={0} >{items.length === 1 ? "Population Group" : "Population Groups" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
  renderAgencies : function (entity){
    var flux = this.props.flux
    
    var items =  flux.store('agencies').filter(function(item){
      return entity.agencies.split(',').indexOf(item.id) > -1
    })
    if (items.length === 0){
      return null       
    } else {      
      return ([
        <h6 key={0} >{items.length === 1 ? "Responsible Agency" : "Responsible Agencies" }</h6>,
        <CategoryList key={1} 
          entities = {items} />
      ])
    }
  },
  renderRecs : function (entity){
    var flux = this.props.flux
    
    var recs =  flux.store('recommendations').filter(function(item){
      return entity.recommendations.split(',').indexOf(item.id) > -1
    })    
    var countRecsAccepted = recs.filter(function(item) {
      return item.response === 'Accepted'
    }).length
    var countRecsRejected = recs.length - countRecsAccepted
    
    if (recs.length === 0 ) {
      return null
    } else {
      return ([
        <h2 key={0} >{recs.length + ((recs.length === 1) ? ' Related UPR Recommendation' : ' Related UPR Recommendations')}</h2>,
        <EntityTable key={1} 
          className="upr-recommendations-table"
          showMoreLabel="related UPR Recommendations"
          cols = {[
            {type:'no', title: 'No',      attr:'id'},            
            {type:'text', title: 'UPR Recommendation', attr:'title'},
            {type:'icon', title: 'Response', class: function(entity){
                return (entity.response === 'Accepted') ? 'icon-accepted' : 'icon-rejected'  
              }
            },
           { 
                type: 'key-links',               
                key: {
                  type:'no',
                  items: [{
                      title:'Accepted',
                      no: countRecsAccepted,
                      color:'#E19900'
                    },
                    {
                      title:'Not Accepted',
                      no: countRecsRejected,
                      color:'#AEBCC1' 
                    }
                  ] 
                }             
              }          
          ]}  
          entities = {recs} />            
      ])
    }
  }, 
  
  handleNavClick: function (page) {
    var flux = this.getFlux()

    return function (e) {
      e.preventDefault()
      flux.actions.navPage(page)
    }
  },
})
